# THIS FILE IS AUTOMATICALLY GENERATED.  EDIT THE SOURCE FILE NOT THIS ONE

"""Various descriptions of data specific to the Samsung SCH-A950 Phone"""

from prototypes import *
from prototypes_samsung import *
from p_brew import *
from p_samsungscha950 import *

RT_PATH='brew/mod/mr'
RT_INDEX_FILE_NAME=RT_PATH+'/MrInfo.db'
RT_EXCLUDED_FILES=('MrInfo.db',)

SND_PATH='brew/mod/18067'
SND_INDEX_FILE_NAME=SND_PATH+'/MsInfo.db'
SND_EXCLUDED_FILES=('MsInfo.db', 'ExInfo.db')

PIC_PATH='brew/mod/10888'
PIC_INDEX_FILE_NAME=PIC_PATH+'/Default Album.alb'
PIC_EXCLUDED_FILES=('Default Album.alb',)
PIC_TYPE_HEADER=0
PIC_TYPE_BUILTIN=4
PIC_TYPE_USERS=3

VIDEO_PATH='brew/mod/10890'
VIDEO_INDEX_FILE_NAME=VIDEO_PATH+'/Default Album.alb'

PB_FLG_NOTE=0x0200
PB_MAX_NOTE_LEN=64

CL_MAX_ENTRIES=90
CL_TYPE_INCOMING=2
CL_TYPE_OUTGOING=1
CL_TYPE_MISSED=3
CL_TYPE_DELETED=5
CL_VALID_TYPE=frozenset((CL_TYPE_INCOMING, CL_TYPE_OUTGOING, CL_TYPE_MISSED))

class WRingtoneIndexEntry(BaseProtogenClass):
    __fields=['name', 'path_prefix', 'pathname', 'eor']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WRingtoneIndexEntry,self).__init__(**dict)
        if self.__class__ is WRingtoneIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WRingtoneIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WRingtoneIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed
        try: self.__field_name
        except:
            self.__field_name=STRING()


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        self.__field_path_prefix.writetobuffer(buf)
        self.__field_pathname.writetobuffer(buf)
        try: self.__field_eor
        except:
            self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|3\x0A' })
        self.__field_eor.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        self.__field_path_prefix.readfrombuffer(buf)
        self.__field_pathname=STRING(**{ 'terminator': None })
        self.__field_pathname.readfrombuffer(buf)
        self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|3\x0A' })
        self.__field_eor.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_name(self):
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,STRING):
            self.__field_name=value
        else:
            self.__field_name=STRING(value,)

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_path_prefix(self):
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        return self.__field_path_prefix.getvalue()

    def __setfield_path_prefix(self, value):
        if isinstance(value,STRING):
            self.__field_path_prefix=value
        else:
            self.__field_path_prefix=STRING(value,**{ 'terminator': None,               'default': '/ff/' })

    def __delfield_path_prefix(self): del self.__field_path_prefix

    path_prefix=property(__getfield_path_prefix, __setfield_path_prefix, __delfield_path_prefix, None)

    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{ 'terminator': None })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_eor(self):
        try: self.__field_eor
        except:
            self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|3\x0A' })
        return self.__field_eor.getvalue()

    def __setfield_eor(self, value):
        if isinstance(value,STRING):
            self.__field_eor=value
        else:
            self.__field_eor=STRING(value,**{ 'terminator': None,               'default': '|0|3\x0A' })

    def __delfield_eor(self): del self.__field_eor

    eor=property(__getfield_eor, __setfield_eor, __delfield_eor, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('name', self.__field_name, None)
        yield ('path_prefix', self.__field_path_prefix, None)
        yield ('pathname', self.__field_pathname, None)
        yield ('eor', self.__field_eor, None)




class WRingtoneIndexFile(BaseProtogenClass):
    __fields=['items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WRingtoneIndexFile,self).__init__(**dict)
        if self.__class__ is WRingtoneIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WRingtoneIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WRingtoneIndexFile,kwargs)
        if len(args):
            dict2={ 'elementclass': WRingtoneIndexEntry }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_items=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WRingtoneIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': WRingtoneIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WRingtoneIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': WRingtoneIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)




class RRingtoneIndexEntry(BaseProtogenClass):
    __fields=['pathname', 'misc']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RRingtoneIndexEntry,self).__init__(**dict)
        if self.__class__ is RRingtoneIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RRingtoneIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RRingtoneIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_pathname.writetobuffer(buf)
        self.__field_misc.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_pathname=STRING(**{ 'terminator': 0x7C })
        self.__field_pathname.readfrombuffer(buf)
        self.__field_misc=STRING(**{ 'terminator': 0x0A })
        self.__field_misc.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{ 'terminator': 0x7C })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_misc(self):
        return self.__field_misc.getvalue()

    def __setfield_misc(self, value):
        if isinstance(value,STRING):
            self.__field_misc=value
        else:
            self.__field_misc=STRING(value,**{ 'terminator': 0x0A })

    def __delfield_misc(self): del self.__field_misc

    misc=property(__getfield_misc, __setfield_misc, __delfield_misc, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('pathname', self.__field_pathname, None)
        yield ('misc', self.__field_misc, None)




class RRingtoneIndexFile(BaseProtogenClass):
    __fields=['items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RRingtoneIndexFile,self).__init__(**dict)
        if self.__class__ is RRingtoneIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RRingtoneIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RRingtoneIndexFile,kwargs)
        if len(args):
            dict2={ 'elementclass': RRingtoneIndexEntry }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_items=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RRingtoneIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': RRingtoneIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RRingtoneIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': RRingtoneIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)




class WSoundsIndexEntry(BaseProtogenClass):
    __fields=['name', 'path_prefix', 'pathname', 'eor']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WSoundsIndexEntry,self).__init__(**dict)
        if self.__class__ is WSoundsIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WSoundsIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WSoundsIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed
        try: self.__field_name
        except:
            self.__field_name=STRING()


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        self.__field_path_prefix.writetobuffer(buf)
        self.__field_pathname.writetobuffer(buf)
        try: self.__field_eor
        except:
            self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|7\x0A' })
        self.__field_eor.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        self.__field_path_prefix.readfrombuffer(buf)
        self.__field_pathname=STRING(**{ 'terminator': None })
        self.__field_pathname.readfrombuffer(buf)
        self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|7\x0A' })
        self.__field_eor.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_name(self):
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,STRING):
            self.__field_name=value
        else:
            self.__field_name=STRING(value,)

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_path_prefix(self):
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'terminator': None,               'default': '/ff/' })
        return self.__field_path_prefix.getvalue()

    def __setfield_path_prefix(self, value):
        if isinstance(value,STRING):
            self.__field_path_prefix=value
        else:
            self.__field_path_prefix=STRING(value,**{ 'terminator': None,               'default': '/ff/' })

    def __delfield_path_prefix(self): del self.__field_path_prefix

    path_prefix=property(__getfield_path_prefix, __setfield_path_prefix, __delfield_path_prefix, None)

    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{ 'terminator': None })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_eor(self):
        try: self.__field_eor
        except:
            self.__field_eor=STRING(**{ 'terminator': None,               'default': '|0|7\x0A' })
        return self.__field_eor.getvalue()

    def __setfield_eor(self, value):
        if isinstance(value,STRING):
            self.__field_eor=value
        else:
            self.__field_eor=STRING(value,**{ 'terminator': None,               'default': '|0|7\x0A' })

    def __delfield_eor(self): del self.__field_eor

    eor=property(__getfield_eor, __setfield_eor, __delfield_eor, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('name', self.__field_name, None)
        yield ('path_prefix', self.__field_path_prefix, None)
        yield ('pathname', self.__field_pathname, None)
        yield ('eor', self.__field_eor, None)




class WSoundsIndexFile(BaseProtogenClass):
    __fields=['items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WSoundsIndexFile,self).__init__(**dict)
        if self.__class__ is WSoundsIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WSoundsIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WSoundsIndexFile,kwargs)
        if len(args):
            dict2={ 'elementclass': WSoundsIndexEntry }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_items=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WSoundsIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': WSoundsIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WSoundsIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': WSoundsIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)




class RSoundIndexEntry(BaseProtogenClass):
    __fields=['pathname', 'misc']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RSoundIndexEntry,self).__init__(**dict)
        if self.__class__ is RSoundIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RSoundIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RSoundIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_pathname.writetobuffer(buf)
        self.__field_misc.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_pathname=STRING(**{ 'terminator': 0x7C })
        self.__field_pathname.readfrombuffer(buf)
        self.__field_misc=STRING(**{ 'terminator': 0x0A })
        self.__field_misc.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{ 'terminator': 0x7C })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_misc(self):
        return self.__field_misc.getvalue()

    def __setfield_misc(self, value):
        if isinstance(value,STRING):
            self.__field_misc=value
        else:
            self.__field_misc=STRING(value,**{ 'terminator': 0x0A })

    def __delfield_misc(self): del self.__field_misc

    misc=property(__getfield_misc, __setfield_misc, __delfield_misc, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('pathname', self.__field_pathname, None)
        yield ('misc', self.__field_misc, None)




class RSoundsIndexFile(BaseProtogenClass):
    __fields=['items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RSoundsIndexFile,self).__init__(**dict)
        if self.__class__ is RSoundsIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RSoundsIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RSoundsIndexFile,kwargs)
        if len(args):
            dict2={ 'elementclass': RSoundIndexEntry }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_items=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RSoundIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': RSoundIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RSoundIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': RSoundIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)




class WPictureIndexEntry(BaseProtogenClass):
    __fields=['path_prefix', 'pathname', 'path_name', 'pictype']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WPictureIndexEntry,self).__init__(**dict)
        if self.__class__ is WPictureIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WPictureIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WPictureIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'default': '/ff/' })
        try: self.__field_pathname
        except:
            self.__field_pathname=STRING(**{ 'terminator': None })


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_path_name
        except:
            self.__field_path_name=STRING(**{'sizeinbytes': 258,  'terminator': 0,                 'default': self.path_prefix+self.pathname })
        self.__field_path_name.writetobuffer(buf)
        try: self.__field_pictype
        except:
            self.__field_pictype=UINT(**{'sizeinbytes': 2,  'default': PIC_TYPE_USERS })
        self.__field_pictype.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_path_name=STRING(**{'sizeinbytes': 258,  'terminator': 0,                 'default': self.path_prefix+self.pathname })
        self.__field_path_name.readfrombuffer(buf)
        self.__field_pictype=UINT(**{'sizeinbytes': 2,  'default': PIC_TYPE_USERS })
        self.__field_pictype.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_path_prefix(self):
        try: self.__field_path_prefix
        except:
            self.__field_path_prefix=STRING(**{ 'default': '/ff/' })
        return self.__field_path_prefix.getvalue()

    def __setfield_path_prefix(self, value):
        if isinstance(value,STRING):
            self.__field_path_prefix=value
        else:
            self.__field_path_prefix=STRING(value,**{ 'default': '/ff/' })

    def __delfield_path_prefix(self): del self.__field_path_prefix

    path_prefix=property(__getfield_path_prefix, __setfield_path_prefix, __delfield_path_prefix, None)

    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{ 'terminator': None })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_path_name(self):
        try: self.__field_path_name
        except:
            self.__field_path_name=STRING(**{'sizeinbytes': 258,  'terminator': 0,                 'default': self.path_prefix+self.pathname })
        return self.__field_path_name.getvalue()

    def __setfield_path_name(self, value):
        if isinstance(value,STRING):
            self.__field_path_name=value
        else:
            self.__field_path_name=STRING(value,**{'sizeinbytes': 258,  'terminator': 0,                 'default': self.path_prefix+self.pathname })

    def __delfield_path_name(self): del self.__field_path_name

    path_name=property(__getfield_path_name, __setfield_path_name, __delfield_path_name, None)

    def __getfield_pictype(self):
        try: self.__field_pictype
        except:
            self.__field_pictype=UINT(**{'sizeinbytes': 2,  'default': PIC_TYPE_USERS })
        return self.__field_pictype.getvalue()

    def __setfield_pictype(self, value):
        if isinstance(value,UINT):
            self.__field_pictype=value
        else:
            self.__field_pictype=UINT(value,**{'sizeinbytes': 2,  'default': PIC_TYPE_USERS })

    def __delfield_pictype(self): del self.__field_pictype

    pictype=property(__getfield_pictype, __setfield_pictype, __delfield_pictype, "0= invalid, 4=builtin, 3=users")

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('path_prefix', self.__field_path_prefix, None)
        yield ('pathname', self.__field_pathname, None)
        yield ('path_name', self.__field_path_name, None)
        yield ('pictype', self.__field_pictype, "0= invalid, 4=builtin, 3=users")




class WPictureIndexFile(BaseProtogenClass):
    __fields=['header', 'preloaded1', 'preloaded2', 'preloaded3', 'preloaded4', 'preloaded5', 'preloaded6', 'preloaded7', 'preloaded8', 'items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(WPictureIndexFile,self).__init__(**dict)
        if self.__class__ is WPictureIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(WPictureIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(WPictureIndexFile,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_header
        except:
            self.__field_header=WPictureIndexEntry(**{ 'pathname': '0|/ff/brew/mod/10888/Default Album|\x0A',                           'path_prefix': '',                           'pictype': PIC_TYPE_HEADER })
        self.__field_header.writetobuffer(buf)
        try: self.__field_preloaded1
        except:
            self.__field_preloaded1=WPictureIndexEntry(**{ 'pathname': 'Preloaded1',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded1.writetobuffer(buf)
        try: self.__field_preloaded2
        except:
            self.__field_preloaded2=WPictureIndexEntry(**{ 'pathname': 'Preloaded2',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded2.writetobuffer(buf)
        try: self.__field_preloaded3
        except:
            self.__field_preloaded3=WPictureIndexEntry(**{ 'pathname': 'Preloaded3',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded3.writetobuffer(buf)
        try: self.__field_preloaded4
        except:
            self.__field_preloaded4=WPictureIndexEntry(**{ 'pathname': 'Preloaded4',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded4.writetobuffer(buf)
        try: self.__field_preloaded5
        except:
            self.__field_preloaded5=WPictureIndexEntry(**{ 'pathname': 'Preloaded5',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded5.writetobuffer(buf)
        try: self.__field_preloaded6
        except:
            self.__field_preloaded6=WPictureIndexEntry(**{ 'pathname': 'Preloaded6',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded6.writetobuffer(buf)
        try: self.__field_preloaded7
        except:
            self.__field_preloaded7=WPictureIndexEntry(**{ 'pathname': 'Preloaded7',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded7.writetobuffer(buf)
        try: self.__field_preloaded8
        except:
            self.__field_preloaded8=WPictureIndexEntry(**{ 'pathname': 'Preloaded8',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded8.writetobuffer(buf)
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WPictureIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_header=WPictureIndexEntry(**{ 'pathname': '0|/ff/brew/mod/10888/Default Album|\x0A',                           'path_prefix': '',                           'pictype': PIC_TYPE_HEADER })
        self.__field_header.readfrombuffer(buf)
        self.__field_preloaded1=WPictureIndexEntry(**{ 'pathname': 'Preloaded1',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded1.readfrombuffer(buf)
        self.__field_preloaded2=WPictureIndexEntry(**{ 'pathname': 'Preloaded2',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded2.readfrombuffer(buf)
        self.__field_preloaded3=WPictureIndexEntry(**{ 'pathname': 'Preloaded3',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded3.readfrombuffer(buf)
        self.__field_preloaded4=WPictureIndexEntry(**{ 'pathname': 'Preloaded4',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded4.readfrombuffer(buf)
        self.__field_preloaded5=WPictureIndexEntry(**{ 'pathname': 'Preloaded5',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded5.readfrombuffer(buf)
        self.__field_preloaded6=WPictureIndexEntry(**{ 'pathname': 'Preloaded6',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded6.readfrombuffer(buf)
        self.__field_preloaded7=WPictureIndexEntry(**{ 'pathname': 'Preloaded7',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded7.readfrombuffer(buf)
        self.__field_preloaded8=WPictureIndexEntry(**{ 'pathname': 'Preloaded8',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        self.__field_preloaded8.readfrombuffer(buf)
        self.__field_items=LIST(**{ 'elementclass': WPictureIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_header(self):
        try: self.__field_header
        except:
            self.__field_header=WPictureIndexEntry(**{ 'pathname': '0|/ff/brew/mod/10888/Default Album|\x0A',                           'path_prefix': '',                           'pictype': PIC_TYPE_HEADER })
        return self.__field_header.getvalue()

    def __setfield_header(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_header=value
        else:
            self.__field_header=WPictureIndexEntry(value,**{ 'pathname': '0|/ff/brew/mod/10888/Default Album|\x0A',                           'path_prefix': '',                           'pictype': PIC_TYPE_HEADER })

    def __delfield_header(self): del self.__field_header

    header=property(__getfield_header, __setfield_header, __delfield_header, None)

    def __getfield_preloaded1(self):
        try: self.__field_preloaded1
        except:
            self.__field_preloaded1=WPictureIndexEntry(**{ 'pathname': 'Preloaded1',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded1.getvalue()

    def __setfield_preloaded1(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded1=value
        else:
            self.__field_preloaded1=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded1',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded1(self): del self.__field_preloaded1

    preloaded1=property(__getfield_preloaded1, __setfield_preloaded1, __delfield_preloaded1, None)

    def __getfield_preloaded2(self):
        try: self.__field_preloaded2
        except:
            self.__field_preloaded2=WPictureIndexEntry(**{ 'pathname': 'Preloaded2',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded2.getvalue()

    def __setfield_preloaded2(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded2=value
        else:
            self.__field_preloaded2=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded2',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded2(self): del self.__field_preloaded2

    preloaded2=property(__getfield_preloaded2, __setfield_preloaded2, __delfield_preloaded2, None)

    def __getfield_preloaded3(self):
        try: self.__field_preloaded3
        except:
            self.__field_preloaded3=WPictureIndexEntry(**{ 'pathname': 'Preloaded3',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded3.getvalue()

    def __setfield_preloaded3(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded3=value
        else:
            self.__field_preloaded3=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded3',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded3(self): del self.__field_preloaded3

    preloaded3=property(__getfield_preloaded3, __setfield_preloaded3, __delfield_preloaded3, None)

    def __getfield_preloaded4(self):
        try: self.__field_preloaded4
        except:
            self.__field_preloaded4=WPictureIndexEntry(**{ 'pathname': 'Preloaded4',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded4.getvalue()

    def __setfield_preloaded4(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded4=value
        else:
            self.__field_preloaded4=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded4',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded4(self): del self.__field_preloaded4

    preloaded4=property(__getfield_preloaded4, __setfield_preloaded4, __delfield_preloaded4, None)

    def __getfield_preloaded5(self):
        try: self.__field_preloaded5
        except:
            self.__field_preloaded5=WPictureIndexEntry(**{ 'pathname': 'Preloaded5',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded5.getvalue()

    def __setfield_preloaded5(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded5=value
        else:
            self.__field_preloaded5=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded5',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded5(self): del self.__field_preloaded5

    preloaded5=property(__getfield_preloaded5, __setfield_preloaded5, __delfield_preloaded5, None)

    def __getfield_preloaded6(self):
        try: self.__field_preloaded6
        except:
            self.__field_preloaded6=WPictureIndexEntry(**{ 'pathname': 'Preloaded6',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded6.getvalue()

    def __setfield_preloaded6(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded6=value
        else:
            self.__field_preloaded6=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded6',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded6(self): del self.__field_preloaded6

    preloaded6=property(__getfield_preloaded6, __setfield_preloaded6, __delfield_preloaded6, None)

    def __getfield_preloaded7(self):
        try: self.__field_preloaded7
        except:
            self.__field_preloaded7=WPictureIndexEntry(**{ 'pathname': 'Preloaded7',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded7.getvalue()

    def __setfield_preloaded7(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded7=value
        else:
            self.__field_preloaded7=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded7',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded7(self): del self.__field_preloaded7

    preloaded7=property(__getfield_preloaded7, __setfield_preloaded7, __delfield_preloaded7, None)

    def __getfield_preloaded8(self):
        try: self.__field_preloaded8
        except:
            self.__field_preloaded8=WPictureIndexEntry(**{ 'pathname': 'Preloaded8',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })
        return self.__field_preloaded8.getvalue()

    def __setfield_preloaded8(self, value):
        if isinstance(value,WPictureIndexEntry):
            self.__field_preloaded8=value
        else:
            self.__field_preloaded8=WPictureIndexEntry(value,**{ 'pathname': 'Preloaded8',                           'path_prefix': '',                           'pictype': PIC_TYPE_BUILTIN })

    def __delfield_preloaded8(self): del self.__field_preloaded8

    preloaded8=property(__getfield_preloaded8, __setfield_preloaded8, __delfield_preloaded8, None)

    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': WPictureIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': WPictureIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('header', self.__field_header, None)
        yield ('preloaded1', self.__field_preloaded1, None)
        yield ('preloaded2', self.__field_preloaded2, None)
        yield ('preloaded3', self.__field_preloaded3, None)
        yield ('preloaded4', self.__field_preloaded4, None)
        yield ('preloaded5', self.__field_preloaded5, None)
        yield ('preloaded6', self.__field_preloaded6, None)
        yield ('preloaded7', self.__field_preloaded7, None)
        yield ('preloaded8', self.__field_preloaded8, None)
        yield ('items', self.__field_items, None)




class RPictureIndexEntry(BaseProtogenClass):
    __fields=['pathname', 'pictype']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RPictureIndexEntry,self).__init__(**dict)
        if self.__class__ is RPictureIndexEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RPictureIndexEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RPictureIndexEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_pathname.writetobuffer(buf)
        self.__field_pictype.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_pathname=STRING(**{'sizeinbytes': 258,  'terminator': 0,                 'raiseonunterminatedread': False })
        self.__field_pathname.readfrombuffer(buf)
        self.__field_pictype=UINT(**{'sizeinbytes': 2})
        self.__field_pictype.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_pathname(self):
        return self.__field_pathname.getvalue()

    def __setfield_pathname(self, value):
        if isinstance(value,STRING):
            self.__field_pathname=value
        else:
            self.__field_pathname=STRING(value,**{'sizeinbytes': 258,  'terminator': 0,                 'raiseonunterminatedread': False })

    def __delfield_pathname(self): del self.__field_pathname

    pathname=property(__getfield_pathname, __setfield_pathname, __delfield_pathname, None)

    def __getfield_pictype(self):
        return self.__field_pictype.getvalue()

    def __setfield_pictype(self, value):
        if isinstance(value,UINT):
            self.__field_pictype=value
        else:
            self.__field_pictype=UINT(value,**{'sizeinbytes': 2})

    def __delfield_pictype(self): del self.__field_pictype

    pictype=property(__getfield_pictype, __setfield_pictype, __delfield_pictype, "0= invalid, 4=builtin, 3=users")

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('pathname', self.__field_pathname, None)
        yield ('pictype', self.__field_pictype, "0= invalid, 4=builtin, 3=users")




class RPictureIndexFile(BaseProtogenClass):
    __fields=['items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(RPictureIndexFile,self).__init__(**dict)
        if self.__class__ is RPictureIndexFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(RPictureIndexFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(RPictureIndexFile,kwargs)
        if len(args):
            dict2={ 'elementclass': RPictureIndexEntry }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_items=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RPictureIndexEntry })
        self.__field_items.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': RPictureIndexEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': RPictureIndexEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': RPictureIndexEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)




class NumberEntry(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['number', 'option', 'speeddial', 'ringtone']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(NumberEntry,self).__init__(**dict)
        if self.__class__ is NumberEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(NumberEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(NumberEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_number=STRING(**{ 'terminator': None,               'pascal': True })
        self.__field_number.readfrombuffer(buf)
        self.__field_option=UINT(**{'sizeinbytes': 1})
        self.__field_option.readfrombuffer(buf)
        if self.has_speeddial:
            self.__field_speeddial=UINT(**{'sizeinbytes': 2})
            self.__field_speeddial.readfrombuffer(buf)
        if self.has_ringtone:
            self.__field_ringtone=STRING(**{ 'terminator': None,                   'pascal': True })
            self.__field_ringtone.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_number(self):
        return self.__field_number.getvalue()

    def __setfield_number(self, value):
        if isinstance(value,STRING):
            self.__field_number=value
        else:
            self.__field_number=STRING(value,**{ 'terminator': None,               'pascal': True })

    def __delfield_number(self): del self.__field_number

    number=property(__getfield_number, __setfield_number, __delfield_number, None)

    def __getfield_option(self):
        return self.__field_option.getvalue()

    def __setfield_option(self, value):
        if isinstance(value,UINT):
            self.__field_option=value
        else:
            self.__field_option=UINT(value,**{'sizeinbytes': 1})

    def __delfield_option(self): del self.__field_option

    option=property(__getfield_option, __setfield_option, __delfield_option, None)

    def __getfield_speeddial(self):
        return self.__field_speeddial.getvalue()

    def __setfield_speeddial(self, value):
        if isinstance(value,UINT):
            self.__field_speeddial=value
        else:
            self.__field_speeddial=UINT(value,**{'sizeinbytes': 2})

    def __delfield_speeddial(self): del self.__field_speeddial

    speeddial=property(__getfield_speeddial, __setfield_speeddial, __delfield_speeddial, None)

    def __getfield_ringtone(self):
        return self.__field_ringtone.getvalue()

    def __setfield_ringtone(self, value):
        if isinstance(value,STRING):
            self.__field_ringtone=value
        else:
            self.__field_ringtone=STRING(value,**{ 'terminator': None,                   'pascal': True })

    def __delfield_ringtone(self): del self.__field_ringtone

    ringtone=property(__getfield_ringtone, __setfield_ringtone, __delfield_ringtone, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('number', self.__field_number, None)
        yield ('option', self.__field_option, None)
        if self.has_speeddial:
            yield ('speeddial', self.__field_speeddial, None)
        if self.has_ringtone:
            yield ('ringtone', self.__field_ringtone, None)

    @property
    def has_speeddial(self):
        return bool(self.option & PB_FLG_SPEEDDIAL)
    @property
    def has_ringtone(self):
        return bool(self.option & PB_FLG_RINGTONE)
    @property
    def is_primary(self):
        return bool(self.option & PB_FLG_PRIMARY)




class PBEntry(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['info', 'name', 'email', 'email2', 'home', 'work', 'cell', 'fax', 'cell2', 'note', 'datetime', 'group', 'wallpaper', 'wallpaper_range']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(PBEntry,self).__init__(**dict)
        if self.__class__ is PBEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(PBEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(PBEntry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_info=UINT(**{'sizeinbytes': 2})
        self.__field_info.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 2}).readfrombuffer(buf)
        if self.has_name:
            self.__field_name=USTRING(**{ 'terminator': None,                    'encoding': ENCODING,                    'pascal': True })
            self.__field_name.readfrombuffer(buf)
        if self.has_email:
            self.__field_email=USTRING(**{ 'terminator': None,                    'encoding': ENCODING,                    'pascal': True })
            self.__field_email.readfrombuffer(buf)
        if self.has_email2:
            self.__field_email2=USTRING(**{ 'terminator': None,                    'encoding': ENCODING,                   'pascal': True })
            self.__field_email2.readfrombuffer(buf)
        if self.has_home:
            self.__field_home=NumberEntry()
            self.__field_home.readfrombuffer(buf)
        if self.has_work:
            self.__field_work=NumberEntry()
            self.__field_work.readfrombuffer(buf)
        if self.has_cell:
            self.__field_cell=NumberEntry()
            self.__field_cell.readfrombuffer(buf)
        if self.has_fax:
            self.__field_fax=NumberEntry()
            self.__field_fax.readfrombuffer(buf)
        if self.has_cell2:
            self.__field_cell2=NumberEntry()
            self.__field_cell2.readfrombuffer(buf)
        if self.has_note:
            self.__field_note=STRING(**{ 'terminator': None,                   'pascal': True })
            self.__field_note.readfrombuffer(buf)
        if self.has_date:
            self.__field_datetime=DateTime(**{'sizeinbytes': 4})
            self.__field_datetime.readfrombuffer(buf)
        if self.hsa_group:
            self.__field_group=UINT(**{'sizeinbytes': 1})
            self.__field_group.readfrombuffer(buf)
        if self.has_wallpaper:
            self.__field_wallpaper=STRING(**{ 'terminator': None,                   'pascal': True })
            self.__field_wallpaper.readfrombuffer(buf)
            self.__field_wallpaper_range=UINT(**{'sizeinbytes': 4})
            self.__field_wallpaper_range.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_info(self):
        return self.__field_info.getvalue()

    def __setfield_info(self, value):
        if isinstance(value,UINT):
            self.__field_info=value
        else:
            self.__field_info=UINT(value,**{'sizeinbytes': 2})

    def __delfield_info(self): del self.__field_info

    info=property(__getfield_info, __setfield_info, __delfield_info, None)

    def __getfield_name(self):
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{ 'terminator': None,                    'encoding': ENCODING,                    'pascal': True })

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_email(self):
        return self.__field_email.getvalue()

    def __setfield_email(self, value):
        if isinstance(value,USTRING):
            self.__field_email=value
        else:
            self.__field_email=USTRING(value,**{ 'terminator': None,                    'encoding': ENCODING,                    'pascal': True })

    def __delfield_email(self): del self.__field_email

    email=property(__getfield_email, __setfield_email, __delfield_email, None)

    def __getfield_email2(self):
        return self.__field_email2.getvalue()

    def __setfield_email2(self, value):
        if isinstance(value,USTRING):
            self.__field_email2=value
        else:
            self.__field_email2=USTRING(value,**{ 'terminator': None,                    'encoding': ENCODING,                   'pascal': True })

    def __delfield_email2(self): del self.__field_email2

    email2=property(__getfield_email2, __setfield_email2, __delfield_email2, None)

    def __getfield_home(self):
        return self.__field_home.getvalue()

    def __setfield_home(self, value):
        if isinstance(value,NumberEntry):
            self.__field_home=value
        else:
            self.__field_home=NumberEntry(value,)

    def __delfield_home(self): del self.__field_home

    home=property(__getfield_home, __setfield_home, __delfield_home, None)

    def __getfield_work(self):
        return self.__field_work.getvalue()

    def __setfield_work(self, value):
        if isinstance(value,NumberEntry):
            self.__field_work=value
        else:
            self.__field_work=NumberEntry(value,)

    def __delfield_work(self): del self.__field_work

    work=property(__getfield_work, __setfield_work, __delfield_work, None)

    def __getfield_cell(self):
        return self.__field_cell.getvalue()

    def __setfield_cell(self, value):
        if isinstance(value,NumberEntry):
            self.__field_cell=value
        else:
            self.__field_cell=NumberEntry(value,)

    def __delfield_cell(self): del self.__field_cell

    cell=property(__getfield_cell, __setfield_cell, __delfield_cell, None)

    def __getfield_fax(self):
        return self.__field_fax.getvalue()

    def __setfield_fax(self, value):
        if isinstance(value,NumberEntry):
            self.__field_fax=value
        else:
            self.__field_fax=NumberEntry(value,)

    def __delfield_fax(self): del self.__field_fax

    fax=property(__getfield_fax, __setfield_fax, __delfield_fax, None)

    def __getfield_cell2(self):
        return self.__field_cell2.getvalue()

    def __setfield_cell2(self, value):
        if isinstance(value,NumberEntry):
            self.__field_cell2=value
        else:
            self.__field_cell2=NumberEntry(value,)

    def __delfield_cell2(self): del self.__field_cell2

    cell2=property(__getfield_cell2, __setfield_cell2, __delfield_cell2, None)

    def __getfield_note(self):
        return self.__field_note.getvalue()

    def __setfield_note(self, value):
        if isinstance(value,STRING):
            self.__field_note=value
        else:
            self.__field_note=STRING(value,**{ 'terminator': None,                   'pascal': True })

    def __delfield_note(self): del self.__field_note

    note=property(__getfield_note, __setfield_note, __delfield_note, None)

    def __getfield_datetime(self):
        return self.__field_datetime.getvalue()

    def __setfield_datetime(self, value):
        if isinstance(value,DateTime):
            self.__field_datetime=value
        else:
            self.__field_datetime=DateTime(value,**{'sizeinbytes': 4})

    def __delfield_datetime(self): del self.__field_datetime

    datetime=property(__getfield_datetime, __setfield_datetime, __delfield_datetime, None)

    def __getfield_group(self):
        return self.__field_group.getvalue()

    def __setfield_group(self, value):
        if isinstance(value,UINT):
            self.__field_group=value
        else:
            self.__field_group=UINT(value,**{'sizeinbytes': 1})

    def __delfield_group(self): del self.__field_group

    group=property(__getfield_group, __setfield_group, __delfield_group, None)

    def __getfield_wallpaper(self):
        return self.__field_wallpaper.getvalue()

    def __setfield_wallpaper(self, value):
        if isinstance(value,STRING):
            self.__field_wallpaper=value
        else:
            self.__field_wallpaper=STRING(value,**{ 'terminator': None,                   'pascal': True })

    def __delfield_wallpaper(self): del self.__field_wallpaper

    wallpaper=property(__getfield_wallpaper, __setfield_wallpaper, __delfield_wallpaper, None)

    def __getfield_wallpaper_range(self):
        return self.__field_wallpaper_range.getvalue()

    def __setfield_wallpaper_range(self, value):
        if isinstance(value,UINT):
            self.__field_wallpaper_range=value
        else:
            self.__field_wallpaper_range=UINT(value,**{'sizeinbytes': 4})

    def __delfield_wallpaper_range(self): del self.__field_wallpaper_range

    wallpaper_range=property(__getfield_wallpaper_range, __setfield_wallpaper_range, __delfield_wallpaper_range, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('info', self.__field_info, None)
        if self.has_name:
            yield ('name', self.__field_name, None)
        if self.has_email:
            yield ('email', self.__field_email, None)
        if self.has_email2:
            yield ('email2', self.__field_email2, None)
        if self.has_home:
            yield ('home', self.__field_home, None)
        if self.has_work:
            yield ('work', self.__field_work, None)
        if self.has_cell:
            yield ('cell', self.__field_cell, None)
        if self.has_fax:
            yield ('fax', self.__field_fax, None)
        if self.has_cell2:
            yield ('cell2', self.__field_cell2, None)
        if self.has_note:
            yield ('note', self.__field_note, None)
        if self.has_date:
            yield ('datetime', self.__field_datetime, None)
        if self.hsa_group:
            yield ('group', self.__field_group, None)
        if self.has_wallpaper:
            yield ('wallpaper', self.__field_wallpaper, None)
            yield ('wallpaper_range', self.__field_wallpaper_range, None)

    @property
    def has_name(self):
        return bool(self.info & PB_FLG_NAME)
    @property
    def has_email(self):
        return bool(self.info & PB_FLG_EMAIL)
    @property
    def has_email2(self):
        return bool(self.info & PB_FLG_EMAIL2)
    @property
    def has_home(self):
        return bool(self.info & PB_FLG_HOME)
    @property
    def has_work(self):
        return bool(self.info & PB_FLG_WORK)
    @property
    def has_cell(self):
        return bool(self.info & PB_FLG_CELL)
    @property
    def has_fax(self):
        return bool(self.info & PB_FLG_FAX)
    @property
    def has_cell2(self):
        return bool(self.info & PB_FLG_CELL2)
    @property
    def has_note(self):
        return bool(self.info & PB_FLG_NOTE)
    @property
    def has_date(self):
        return bool(self.info & PB_FLG_DATE)
    @property
    def has_group(self):
        return bool(self.info & PB_FLG_GROUP)
    @property
    def has_wallpaper(self):
        return bool(self.info & PB_FLG_WP)




class LenEntry(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['itemlen']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(LenEntry,self).__init__(**dict)
        if self.__class__ is LenEntry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(LenEntry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(LenEntry,kwargs)
        if len(args):
            dict2={'sizeinbytes': 2,  'default': 0 }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_itemlen=UINT(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_itemlen=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_itemlen.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_itemlen(self):
        try: self.__field_itemlen
        except:
            self.__field_itemlen=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_itemlen.getvalue()

    def __setfield_itemlen(self, value):
        if isinstance(value,UINT):
            self.__field_itemlen=value
        else:
            self.__field_itemlen=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_itemlen(self): del self.__field_itemlen

    itemlen=property(__getfield_itemlen, __setfield_itemlen, __delfield_itemlen, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('itemlen', self.__field_itemlen, None)




class PBFile(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['lens', 'items']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(PBFile,self).__init__(**dict)
        if self.__class__ is PBFile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(PBFile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(PBFile,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_lens=LIST(**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })
        self.__field_lens.readfrombuffer(buf)
        self.__field_items=LIST(**{ 'elementclass': PBEntry })
        self.__field_items.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_lens(self):
        try: self.__field_lens
        except:
            self.__field_lens=LIST(**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })
        return self.__field_lens.getvalue()

    def __setfield_lens(self, value):
        if isinstance(value,LIST):
            self.__field_lens=value
        else:
            self.__field_lens=LIST(value,**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })

    def __delfield_lens(self): del self.__field_lens

    lens=property(__getfield_lens, __setfield_lens, __delfield_lens, None)

    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': PBEntry })
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': PBEntry })

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('lens', self.__field_lens, None)
        yield ('items', self.__field_items, None)




class PBFileHeader(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['lens']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(PBFileHeader,self).__init__(**dict)
        if self.__class__ is PBFileHeader:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(PBFileHeader,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(PBFileHeader,kwargs)
        if len(args):
            dict2={ 'elementclass': LenEntry,             'length': 8,             'createdefault': True }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_lens=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_lens=LIST(**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })
        self.__field_lens.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_lens(self):
        try: self.__field_lens
        except:
            self.__field_lens=LIST(**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })
        return self.__field_lens.getvalue()

    def __setfield_lens(self, value):
        if isinstance(value,LIST):
            self.__field_lens=value
        else:
            self.__field_lens=LIST(value,**{ 'elementclass': LenEntry,             'length': 8,             'createdefault': True })

    def __delfield_lens(self): del self.__field_lens

    lens=property(__getfield_lens, __setfield_lens, __delfield_lens, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('lens', self.__field_lens, None)




class ss_number_entry(BaseProtogenClass):
    __fields=['number', 'speeddial', 'primary', 'ringtone']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(ss_number_entry,self).__init__(**dict)
        if self.__class__ is ss_number_entry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(ss_number_entry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(ss_number_entry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_number
        except:
            self.__field_number=STRING(**{ 'terminator': 0,               'default': '',               'maxsizeinbytes': PB_MAX_NUMBER_LEN,               'raiseontruncate': False })
        self.__field_number.writetobuffer(buf)
        try: self.__field_speeddial
        except:
            self.__field_speeddial=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_speeddial.writetobuffer(buf)
        try: self.__field_primary
        except:
            self.__field_primary=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_primary.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_244
        except:
            self.__field__gen_p_samsungschu740_244=DONTCARE(**{'sizeinbytes': 8})
        self.__field__gen_p_samsungschu740_244.writetobuffer(buf)
        try: self.__field_ringtone
        except:
            self.__field_ringtone=STRING(**{ 'terminator': 0,               'default': '' })
        self.__field_ringtone.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_number=STRING(**{ 'terminator': 0,               'default': '',               'maxsizeinbytes': PB_MAX_NUMBER_LEN,               'raiseontruncate': False })
        self.__field_number.readfrombuffer(buf)
        self.__field_speeddial=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_speeddial.readfrombuffer(buf)
        self.__field_primary=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_primary.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_244=DONTCARE(**{'sizeinbytes': 8})
        self.__field__gen_p_samsungschu740_244.readfrombuffer(buf)
        self.__field_ringtone=STRING(**{ 'terminator': 0,               'default': '' })
        self.__field_ringtone.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_number(self):
        try: self.__field_number
        except:
            self.__field_number=STRING(**{ 'terminator': 0,               'default': '',               'maxsizeinbytes': PB_MAX_NUMBER_LEN,               'raiseontruncate': False })
        return self.__field_number.getvalue()

    def __setfield_number(self, value):
        if isinstance(value,STRING):
            self.__field_number=value
        else:
            self.__field_number=STRING(value,**{ 'terminator': 0,               'default': '',               'maxsizeinbytes': PB_MAX_NUMBER_LEN,               'raiseontruncate': False })

    def __delfield_number(self): del self.__field_number

    number=property(__getfield_number, __setfield_number, __delfield_number, None)

    def __getfield_speeddial(self):
        try: self.__field_speeddial
        except:
            self.__field_speeddial=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_speeddial.getvalue()

    def __setfield_speeddial(self, value):
        if isinstance(value,UINT):
            self.__field_speeddial=value
        else:
            self.__field_speeddial=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_speeddial(self): del self.__field_speeddial

    speeddial=property(__getfield_speeddial, __setfield_speeddial, __delfield_speeddial, None)

    def __getfield_primary(self):
        try: self.__field_primary
        except:
            self.__field_primary=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_primary.getvalue()

    def __setfield_primary(self, value):
        if isinstance(value,UINT):
            self.__field_primary=value
        else:
            self.__field_primary=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_primary(self): del self.__field_primary

    primary=property(__getfield_primary, __setfield_primary, __delfield_primary, None)

    def __getfield_ringtone(self):
        try: self.__field_ringtone
        except:
            self.__field_ringtone=STRING(**{ 'terminator': 0,               'default': '' })
        return self.__field_ringtone.getvalue()

    def __setfield_ringtone(self, value):
        if isinstance(value,STRING):
            self.__field_ringtone=value
        else:
            self.__field_ringtone=STRING(value,**{ 'terminator': 0,               'default': '' })

    def __delfield_ringtone(self): del self.__field_ringtone

    ringtone=property(__getfield_ringtone, __setfield_ringtone, __delfield_ringtone, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('number', self.__field_number, None)
        yield ('speeddial', self.__field_speeddial, None)
        yield ('primary', self.__field_primary, None)
        yield ('ringtone', self.__field_ringtone, None)




class ss_pb_entry(BaseProtogenClass):
    __fields=['name', 'email', 'email2', 'note', 'wallpaper', 'wallpaper_range', 'home', 'work', 'cell', 'dummy', 'fax', 'cell2', 'group']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(ss_pb_entry,self).__init__(**dict)
        if self.__class__ is ss_pb_entry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(ss_pb_entry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(ss_pb_entry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_name.writetobuffer(buf)
        try: self.__field_email
        except:
            self.__field_email=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        self.__field_email.writetobuffer(buf)
        try: self.__field_email2
        except:
            self.__field_email2=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        self.__field_email2.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_263
        except:
            self.__field__gen_p_samsungschu740_263=DONTCARE(**{'sizeinbytes': 2})
        self.__field__gen_p_samsungschu740_263.writetobuffer(buf)
        try: self.__field_note
        except:
            self.__field_note=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'maxsizeinbytes': PB_MAX_NOTE_LEN,                'raiseontruncate': False,                'default': '' })
        self.__field_note.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_269
        except:
            self.__field__gen_p_samsungschu740_269=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_269.writetobuffer(buf)
        try: self.__field_wallpaper
        except:
            self.__field_wallpaper=STRING(**{ 'terminator': 0,               'default': '' })
        self.__field_wallpaper.writetobuffer(buf)
        try: self.__field_wallpaper_range
        except:
            self.__field_wallpaper_range=UINT(**{'sizeinbytes': 4,  'default': 0 })
        self.__field_wallpaper_range.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_273
        except:
            self.__field__gen_p_samsungschu740_273=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_273.writetobuffer(buf)
        try: self.__field_home
        except:
            self.__field_home=ss_number_entry()
        self.__field_home.writetobuffer(buf)
        try: self.__field_work
        except:
            self.__field_work=ss_number_entry()
        self.__field_work.writetobuffer(buf)
        try: self.__field_cell
        except:
            self.__field_cell=ss_number_entry()
        self.__field_cell.writetobuffer(buf)
        try: self.__field_dummy
        except:
            self.__field_dummy=ss_number_entry()
        self.__field_dummy.writetobuffer(buf)
        try: self.__field_fax
        except:
            self.__field_fax=ss_number_entry()
        self.__field_fax.writetobuffer(buf)
        try: self.__field_cell2
        except:
            self.__field_cell2=ss_number_entry()
        self.__field_cell2.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_280
        except:
            self.__field__gen_p_samsungschu740_280=DONTCARE(**{'sizeinbytes': 4})
        self.__field__gen_p_samsungschu740_280.writetobuffer(buf)
        try: self.__field_group
        except:
            self.__field_group=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_group.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_282
        except:
            self.__field__gen_p_samsungschu740_282=DONTCARE(**{'sizeinbytes': 2})
        self.__field__gen_p_samsungschu740_282.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_name=USTRING(**{ 'terminator': 0,                'maxsizeinbytes': PB_MAX_NAME_LEN,                'encoding': ENCODING,                'raiseontruncate': False })
        self.__field_name.readfrombuffer(buf)
        self.__field_email=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        self.__field_email.readfrombuffer(buf)
        self.__field_email2=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        self.__field_email2.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_263=DONTCARE(**{'sizeinbytes': 2})
        self.__field__gen_p_samsungschu740_263.readfrombuffer(buf)
        self.__field_note=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'maxsizeinbytes': PB_MAX_NOTE_LEN,                'raiseontruncate': False,                'default': '' })
        self.__field_note.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_269=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_269.readfrombuffer(buf)
        self.__field_wallpaper=STRING(**{ 'terminator': 0,               'default': '' })
        self.__field_wallpaper.readfrombuffer(buf)
        self.__field_wallpaper_range=UINT(**{'sizeinbytes': 4,  'default': 0 })
        self.__field_wallpaper_range.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_273=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_273.readfrombuffer(buf)
        self.__field_home=ss_number_entry()
        self.__field_home.readfrombuffer(buf)
        self.__field_work=ss_number_entry()
        self.__field_work.readfrombuffer(buf)
        self.__field_cell=ss_number_entry()
        self.__field_cell.readfrombuffer(buf)
        self.__field_dummy=ss_number_entry()
        self.__field_dummy.readfrombuffer(buf)
        self.__field_fax=ss_number_entry()
        self.__field_fax.readfrombuffer(buf)
        self.__field_cell2=ss_number_entry()
        self.__field_cell2.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_280=DONTCARE(**{'sizeinbytes': 4})
        self.__field__gen_p_samsungschu740_280.readfrombuffer(buf)
        self.__field_group=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_group.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_282=DONTCARE(**{'sizeinbytes': 2})
        self.__field__gen_p_samsungschu740_282.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_name(self):
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{ 'terminator': 0,                'maxsizeinbytes': PB_MAX_NAME_LEN,                'encoding': ENCODING,                'raiseontruncate': False })

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_email(self):
        try: self.__field_email
        except:
            self.__field_email=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        return self.__field_email.getvalue()

    def __setfield_email(self, value):
        if isinstance(value,USTRING):
            self.__field_email=value
        else:
            self.__field_email=USTRING(value,**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })

    def __delfield_email(self): del self.__field_email

    email=property(__getfield_email, __setfield_email, __delfield_email, None)

    def __getfield_email2(self):
        try: self.__field_email2
        except:
            self.__field_email2=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })
        return self.__field_email2.getvalue()

    def __setfield_email2(self, value):
        if isinstance(value,USTRING):
            self.__field_email2=value
        else:
            self.__field_email2=USTRING(value,**{ 'terminator': 0,                'encoding': ENCODING,                'default': '',                'maxsizeinbytes': PB_MAX_EMAIL_LEN,                'raiseontruncate': False })

    def __delfield_email2(self): del self.__field_email2

    email2=property(__getfield_email2, __setfield_email2, __delfield_email2, None)

    def __getfield_note(self):
        try: self.__field_note
        except:
            self.__field_note=USTRING(**{ 'terminator': 0,                'encoding': ENCODING,                'maxsizeinbytes': PB_MAX_NOTE_LEN,                'raiseontruncate': False,                'default': '' })
        return self.__field_note.getvalue()

    def __setfield_note(self, value):
        if isinstance(value,USTRING):
            self.__field_note=value
        else:
            self.__field_note=USTRING(value,**{ 'terminator': 0,                'encoding': ENCODING,                'maxsizeinbytes': PB_MAX_NOTE_LEN,                'raiseontruncate': False,                'default': '' })

    def __delfield_note(self): del self.__field_note

    note=property(__getfield_note, __setfield_note, __delfield_note, None)

    def __getfield_wallpaper(self):
        try: self.__field_wallpaper
        except:
            self.__field_wallpaper=STRING(**{ 'terminator': 0,               'default': '' })
        return self.__field_wallpaper.getvalue()

    def __setfield_wallpaper(self, value):
        if isinstance(value,STRING):
            self.__field_wallpaper=value
        else:
            self.__field_wallpaper=STRING(value,**{ 'terminator': 0,               'default': '' })

    def __delfield_wallpaper(self): del self.__field_wallpaper

    wallpaper=property(__getfield_wallpaper, __setfield_wallpaper, __delfield_wallpaper, None)

    def __getfield_wallpaper_range(self):
        try: self.__field_wallpaper_range
        except:
            self.__field_wallpaper_range=UINT(**{'sizeinbytes': 4,  'default': 0 })
        return self.__field_wallpaper_range.getvalue()

    def __setfield_wallpaper_range(self, value):
        if isinstance(value,UINT):
            self.__field_wallpaper_range=value
        else:
            self.__field_wallpaper_range=UINT(value,**{'sizeinbytes': 4,  'default': 0 })

    def __delfield_wallpaper_range(self): del self.__field_wallpaper_range

    wallpaper_range=property(__getfield_wallpaper_range, __setfield_wallpaper_range, __delfield_wallpaper_range, None)

    def __getfield_home(self):
        try: self.__field_home
        except:
            self.__field_home=ss_number_entry()
        return self.__field_home.getvalue()

    def __setfield_home(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_home=value
        else:
            self.__field_home=ss_number_entry(value,)

    def __delfield_home(self): del self.__field_home

    home=property(__getfield_home, __setfield_home, __delfield_home, None)

    def __getfield_work(self):
        try: self.__field_work
        except:
            self.__field_work=ss_number_entry()
        return self.__field_work.getvalue()

    def __setfield_work(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_work=value
        else:
            self.__field_work=ss_number_entry(value,)

    def __delfield_work(self): del self.__field_work

    work=property(__getfield_work, __setfield_work, __delfield_work, None)

    def __getfield_cell(self):
        try: self.__field_cell
        except:
            self.__field_cell=ss_number_entry()
        return self.__field_cell.getvalue()

    def __setfield_cell(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_cell=value
        else:
            self.__field_cell=ss_number_entry(value,)

    def __delfield_cell(self): del self.__field_cell

    cell=property(__getfield_cell, __setfield_cell, __delfield_cell, None)

    def __getfield_dummy(self):
        try: self.__field_dummy
        except:
            self.__field_dummy=ss_number_entry()
        return self.__field_dummy.getvalue()

    def __setfield_dummy(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_dummy=value
        else:
            self.__field_dummy=ss_number_entry(value,)

    def __delfield_dummy(self): del self.__field_dummy

    dummy=property(__getfield_dummy, __setfield_dummy, __delfield_dummy, None)

    def __getfield_fax(self):
        try: self.__field_fax
        except:
            self.__field_fax=ss_number_entry()
        return self.__field_fax.getvalue()

    def __setfield_fax(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_fax=value
        else:
            self.__field_fax=ss_number_entry(value,)

    def __delfield_fax(self): del self.__field_fax

    fax=property(__getfield_fax, __setfield_fax, __delfield_fax, None)

    def __getfield_cell2(self):
        try: self.__field_cell2
        except:
            self.__field_cell2=ss_number_entry()
        return self.__field_cell2.getvalue()

    def __setfield_cell2(self, value):
        if isinstance(value,ss_number_entry):
            self.__field_cell2=value
        else:
            self.__field_cell2=ss_number_entry(value,)

    def __delfield_cell2(self): del self.__field_cell2

    cell2=property(__getfield_cell2, __setfield_cell2, __delfield_cell2, None)

    def __getfield_group(self):
        try: self.__field_group
        except:
            self.__field_group=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_group.getvalue()

    def __setfield_group(self, value):
        if isinstance(value,UINT):
            self.__field_group=value
        else:
            self.__field_group=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_group(self): del self.__field_group

    group=property(__getfield_group, __setfield_group, __delfield_group, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('name', self.__field_name, None)
        yield ('email', self.__field_email, None)
        yield ('email2', self.__field_email2, None)
        yield ('note', self.__field_note, None)
        yield ('wallpaper', self.__field_wallpaper, None)
        yield ('wallpaper_range', self.__field_wallpaper_range, None)
        yield ('home', self.__field_home, None)
        yield ('work', self.__field_work, None)
        yield ('cell', self.__field_cell, None)
        yield ('dummy', self.__field_dummy, None)
        yield ('fax', self.__field_fax, None)
        yield ('cell2', self.__field_cell2, None)
        yield ('group', self.__field_group, None)




class ss_pb_write_req(BaseProtogenClass):
    __fields=['hdr', 'entry']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(ss_pb_write_req,self).__init__(**dict)
        if self.__class__ is ss_pb_write_req:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(ss_pb_write_req,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(ss_pb_write_req,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_hdr
        except:
            self.__field_hdr=ss_cmd_hdr(**{ 'command': SS_CMD_PB_WRITE })
        self.__field_hdr.writetobuffer(buf)
        try: self.__field__gen_p_samsungschu740_286
        except:
            self.__field__gen_p_samsungschu740_286=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_286.writetobuffer(buf)
        self.__field_entry.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_hdr=ss_cmd_hdr(**{ 'command': SS_CMD_PB_WRITE })
        self.__field_hdr.readfrombuffer(buf)
        self.__field__gen_p_samsungschu740_286=DONTCARE(**{'sizeinbytes': 1})
        self.__field__gen_p_samsungschu740_286.readfrombuffer(buf)
        self.__field_entry=ss_pb_entry()
        self.__field_entry.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_hdr(self):
        try: self.__field_hdr
        except:
            self.__field_hdr=ss_cmd_hdr(**{ 'command': SS_CMD_PB_WRITE })
        return self.__field_hdr.getvalue()

    def __setfield_hdr(self, value):
        if isinstance(value,ss_cmd_hdr):
            self.__field_hdr=value
        else:
            self.__field_hdr=ss_cmd_hdr(value,**{ 'command': SS_CMD_PB_WRITE })

    def __delfield_hdr(self): del self.__field_hdr

    hdr=property(__getfield_hdr, __setfield_hdr, __delfield_hdr, None)

    def __getfield_entry(self):
        return self.__field_entry.getvalue()

    def __setfield_entry(self, value):
        if isinstance(value,ss_pb_entry):
            self.__field_entry=value
        else:
            self.__field_entry=ss_pb_entry(value,)

    def __delfield_entry(self): del self.__field_entry

    entry=property(__getfield_entry, __setfield_entry, __delfield_entry, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('hdr', self.__field_hdr, None)
        yield ('entry', self.__field_entry, None)




class ss_pb_write_resp(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['hdr', 'index']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(ss_pb_write_resp,self).__init__(**dict)
        if self.__class__ is ss_pb_write_resp:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(ss_pb_write_resp,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(ss_pb_write_resp,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_hdr=ss_cmd_hdr()
        self.__field_hdr.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 1}).readfrombuffer(buf)
        self.__field_index=UINT(**{'sizeinbytes': 2})
        self.__field_index.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_hdr(self):
        return self.__field_hdr.getvalue()

    def __setfield_hdr(self, value):
        if isinstance(value,ss_cmd_hdr):
            self.__field_hdr=value
        else:
            self.__field_hdr=ss_cmd_hdr(value,)

    def __delfield_hdr(self): del self.__field_hdr

    hdr=property(__getfield_hdr, __setfield_hdr, __delfield_hdr, None)

    def __getfield_index(self):
        return self.__field_index.getvalue()

    def __setfield_index(self, value):
        if isinstance(value,UINT):
            self.__field_index=value
        else:
            self.__field_index=UINT(value,**{'sizeinbytes': 2})

    def __delfield_index(self): del self.__field_index

    index=property(__getfield_index, __setfield_index, __delfield_index, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('hdr', self.__field_hdr, None)
        yield ('index', self.__field_index, None)




class pBOOL(BaseProtogenClass):
    __fields=['value']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pBOOL,self).__init__(**dict)
        if self.__class__ is pBOOL:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pBOOL,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pBOOL,kwargs)
        if len(args):
            dict2={'sizeinbytes': 'P'}
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_value=BOOL(*args,**dict2)
        # Make all P fields that haven't already been constructed
        try: self.__field_value
        except:
            self.__field_value=BOOL()


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_value(self):
        return self.__field_value.getvalue()

    def __setfield_value(self, value):
        if isinstance(value,BOOL):
            self.__field_value=value
        else:
            self.__field_value=BOOL(value,)

    def __delfield_value(self): del self.__field_value

    value=property(__getfield_value, __setfield_value, __delfield_value, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('value', self.__field_value, None)




class sms_header(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['index', 'msg_len', 'callback_len', 'bitmap1', 'bitmap2', 'body_len', 'file_type', 'msg_type', 'enhance_delivery', 'is_txt_msg', 'in_msg', 'sent_msg', 'draft_msg', 'body']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(sms_header,self).__init__(**dict)
        if self.__class__ is sms_header:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(sms_header,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(sms_header,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_index=UINT(**{'sizeinbytes': 2})
        self.__field_index.readfrombuffer(buf)
        self.__field_msg_len=UINT(**{'sizeinbytes': 1})
        self.__field_msg_len.readfrombuffer(buf)
        self.__field_callback_len=UINT(**{'sizeinbytes': 1})
        self.__field_callback_len.readfrombuffer(buf)
        self.__field_bitmap1=UINT(**{'sizeinbytes': 1})
        self.__field_bitmap1.readfrombuffer(buf)
        self.__field_bitmap2=UINT(**{'sizeinbytes': 1})
        self.__field_bitmap2.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 6}).readfrombuffer(buf)
        self.__field_body_len=UINT(**{'sizeinbytes': 2})
        self.__field_body_len.readfrombuffer(buf)
        self.__field_file_type=UINT(**{'sizeinbytes': 2})
        self.__field_file_type.readfrombuffer(buf)
        self.__field_msg_type=UINT(**{'sizeinbytes': 1})
        self.__field_msg_type.readfrombuffer(buf)
        self.__field_enhance_delivery=UINT(**{'sizeinbytes': 1})
        self.__field_enhance_delivery.readfrombuffer(buf)
        self.__field_is_txt_msg=pBOOL(**{ 'value': self.file_type==SMS_TXT_TYPE and self.msg_type in SMS_VALID_TYPE })
        self.__field_is_txt_msg.readfrombuffer(buf)
        self.__field_in_msg=pBOOL(**{ 'value': self.msg_type==SMS_TYPE_IN })
        self.__field_in_msg.readfrombuffer(buf)
        self.__field_sent_msg=pBOOL(**{ 'value': self.msg_type==SMS_TYPE_SENT })
        self.__field_sent_msg.readfrombuffer(buf)
        self.__field_draft_msg=pBOOL(**{ 'value': self.msg_type==SMS_TYPE_DRAFT })
        self.__field_draft_msg.readfrombuffer(buf)
        if self.is_txt_msg.value:
            self.__field_body=sms_body(**{            'msg_len': self.msg_len,            'has_callback': self.bitmap2 & SMS_FLG2_CALLBACK,            'has_priority': self.bitmap2 & SMS_FLG2_PRIORITY,            'has_1byte': self.bitmap2 & SMS_FLG2_SOMETHING,            'has_1byte2': self.bitmap2 & SMS_FLG2_MSG,            'has_40bytes': self.bitmap1 & SMS_FLG1_HAS40 })
            self.__field_body.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_index(self):
        return self.__field_index.getvalue()

    def __setfield_index(self, value):
        if isinstance(value,UINT):
            self.__field_index=value
        else:
            self.__field_index=UINT(value,**{'sizeinbytes': 2})

    def __delfield_index(self): del self.__field_index

    index=property(__getfield_index, __setfield_index, __delfield_index, None)

    def __getfield_msg_len(self):
        return self.__field_msg_len.getvalue()

    def __setfield_msg_len(self, value):
        if isinstance(value,UINT):
            self.__field_msg_len=value
        else:
            self.__field_msg_len=UINT(value,**{'sizeinbytes': 1})

    def __delfield_msg_len(self): del self.__field_msg_len

    msg_len=property(__getfield_msg_len, __setfield_msg_len, __delfield_msg_len, None)

    def __getfield_callback_len(self):
        return self.__field_callback_len.getvalue()

    def __setfield_callback_len(self, value):
        if isinstance(value,UINT):
            self.__field_callback_len=value
        else:
            self.__field_callback_len=UINT(value,**{'sizeinbytes': 1})

    def __delfield_callback_len(self): del self.__field_callback_len

    callback_len=property(__getfield_callback_len, __setfield_callback_len, __delfield_callback_len, None)

    def __getfield_bitmap1(self):
        return self.__field_bitmap1.getvalue()

    def __setfield_bitmap1(self, value):
        if isinstance(value,UINT):
            self.__field_bitmap1=value
        else:
            self.__field_bitmap1=UINT(value,**{'sizeinbytes': 1})

    def __delfield_bitmap1(self): del self.__field_bitmap1

    bitmap1=property(__getfield_bitmap1, __setfield_bitmap1, __delfield_bitmap1, None)

    def __getfield_bitmap2(self):
        return self.__field_bitmap2.getvalue()

    def __setfield_bitmap2(self, value):
        if isinstance(value,UINT):
            self.__field_bitmap2=value
        else:
            self.__field_bitmap2=UINT(value,**{'sizeinbytes': 1})

    def __delfield_bitmap2(self): del self.__field_bitmap2

    bitmap2=property(__getfield_bitmap2, __setfield_bitmap2, __delfield_bitmap2, None)

    def __getfield_body_len(self):
        return self.__field_body_len.getvalue()

    def __setfield_body_len(self, value):
        if isinstance(value,UINT):
            self.__field_body_len=value
        else:
            self.__field_body_len=UINT(value,**{'sizeinbytes': 2})

    def __delfield_body_len(self): del self.__field_body_len

    body_len=property(__getfield_body_len, __setfield_body_len, __delfield_body_len, None)

    def __getfield_file_type(self):
        return self.__field_file_type.getvalue()

    def __setfield_file_type(self, value):
        if isinstance(value,UINT):
            self.__field_file_type=value
        else:
            self.__field_file_type=UINT(value,**{'sizeinbytes': 2})

    def __delfield_file_type(self): del self.__field_file_type

    file_type=property(__getfield_file_type, __setfield_file_type, __delfield_file_type, None)

    def __getfield_msg_type(self):
        return self.__field_msg_type.getvalue()

    def __setfield_msg_type(self, value):
        if isinstance(value,UINT):
            self.__field_msg_type=value
        else:
            self.__field_msg_type=UINT(value,**{'sizeinbytes': 1})

    def __delfield_msg_type(self): del self.__field_msg_type

    msg_type=property(__getfield_msg_type, __setfield_msg_type, __delfield_msg_type, None)

    def __getfield_enhance_delivery(self):
        return self.__field_enhance_delivery.getvalue()

    def __setfield_enhance_delivery(self, value):
        if isinstance(value,UINT):
            self.__field_enhance_delivery=value
        else:
            self.__field_enhance_delivery=UINT(value,**{'sizeinbytes': 1})

    def __delfield_enhance_delivery(self): del self.__field_enhance_delivery

    enhance_delivery=property(__getfield_enhance_delivery, __setfield_enhance_delivery, __delfield_enhance_delivery, None)

    def __getfield_is_txt_msg(self):
        return self.__field_is_txt_msg.getvalue()

    def __setfield_is_txt_msg(self, value):
        if isinstance(value,pBOOL):
            self.__field_is_txt_msg=value
        else:
            self.__field_is_txt_msg=pBOOL(value,**{ 'value': self.file_type==SMS_TXT_TYPE and self.msg_type in SMS_VALID_TYPE })

    def __delfield_is_txt_msg(self): del self.__field_is_txt_msg

    is_txt_msg=property(__getfield_is_txt_msg, __setfield_is_txt_msg, __delfield_is_txt_msg, None)

    def __getfield_in_msg(self):
        return self.__field_in_msg.getvalue()

    def __setfield_in_msg(self, value):
        if isinstance(value,pBOOL):
            self.__field_in_msg=value
        else:
            self.__field_in_msg=pBOOL(value,**{ 'value': self.msg_type==SMS_TYPE_IN })

    def __delfield_in_msg(self): del self.__field_in_msg

    in_msg=property(__getfield_in_msg, __setfield_in_msg, __delfield_in_msg, None)

    def __getfield_sent_msg(self):
        return self.__field_sent_msg.getvalue()

    def __setfield_sent_msg(self, value):
        if isinstance(value,pBOOL):
            self.__field_sent_msg=value
        else:
            self.__field_sent_msg=pBOOL(value,**{ 'value': self.msg_type==SMS_TYPE_SENT })

    def __delfield_sent_msg(self): del self.__field_sent_msg

    sent_msg=property(__getfield_sent_msg, __setfield_sent_msg, __delfield_sent_msg, None)

    def __getfield_draft_msg(self):
        return self.__field_draft_msg.getvalue()

    def __setfield_draft_msg(self, value):
        if isinstance(value,pBOOL):
            self.__field_draft_msg=value
        else:
            self.__field_draft_msg=pBOOL(value,**{ 'value': self.msg_type==SMS_TYPE_DRAFT })

    def __delfield_draft_msg(self): del self.__field_draft_msg

    draft_msg=property(__getfield_draft_msg, __setfield_draft_msg, __delfield_draft_msg, None)

    def __getfield_body(self):
        return self.__field_body.getvalue()

    def __setfield_body(self, value):
        if isinstance(value,sms_body):
            self.__field_body=value
        else:
            self.__field_body=sms_body(value,**{            'msg_len': self.msg_len,            'has_callback': self.bitmap2 & SMS_FLG2_CALLBACK,            'has_priority': self.bitmap2 & SMS_FLG2_PRIORITY,            'has_1byte': self.bitmap2 & SMS_FLG2_SOMETHING,            'has_1byte2': self.bitmap2 & SMS_FLG2_MSG,            'has_40bytes': self.bitmap1 & SMS_FLG1_HAS40 })

    def __delfield_body(self): del self.__field_body

    body=property(__getfield_body, __setfield_body, __delfield_body, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('index', self.__field_index, None)
        yield ('msg_len', self.__field_msg_len, None)
        yield ('callback_len', self.__field_callback_len, None)
        yield ('bitmap1', self.__field_bitmap1, None)
        yield ('bitmap2', self.__field_bitmap2, None)
        yield ('body_len', self.__field_body_len, None)
        yield ('file_type', self.__field_file_type, None)
        yield ('msg_type', self.__field_msg_type, None)
        yield ('enhance_delivery', self.__field_enhance_delivery, None)
        yield ('is_txt_msg', self.__field_is_txt_msg, None)
        yield ('in_msg', self.__field_in_msg, None)
        yield ('sent_msg', self.__field_sent_msg, None)
        yield ('draft_msg', self.__field_draft_msg, None)
        if self.is_txt_msg.value:
            yield ('body', self.__field_body, None)




class sms_msg_stat_list(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['status']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(sms_msg_stat_list,self).__init__(**dict)
        if self.__class__ is sms_msg_stat_list:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(sms_msg_stat_list,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(sms_msg_stat_list,kwargs)
        if len(args):
            dict2={'sizeinbytes': 1}
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_status=UINT(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_status=UINT(**{'sizeinbytes': 1})
        self.__field_status.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_status(self):
        return self.__field_status.getvalue()

    def __setfield_status(self, value):
        if isinstance(value,UINT):
            self.__field_status=value
        else:
            self.__field_status=UINT(value,**{'sizeinbytes': 1})

    def __delfield_status(self): del self.__field_status

    status=property(__getfield_status, __setfield_status, __delfield_status, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('status', self.__field_status, None)




class sms_datetime_list(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['datetime']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(sms_datetime_list,self).__init__(**dict)
        if self.__class__ is sms_datetime_list:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(sms_datetime_list,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(sms_datetime_list,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_datetime=DateTime1(**{'sizeinbytes': 4})
        self.__field_datetime.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 4}).readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_datetime(self):
        return self.__field_datetime.getvalue()

    def __setfield_datetime(self, value):
        if isinstance(value,DateTime1):
            self.__field_datetime=value
        else:
            self.__field_datetime=DateTime1(value,**{'sizeinbytes': 4})

    def __delfield_datetime(self): del self.__field_datetime

    datetime=property(__getfield_datetime, __setfield_datetime, __delfield_datetime, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('datetime', self.__field_datetime, None)




class sms_delivered_datetime(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['datetime']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(sms_delivered_datetime,self).__init__(**dict)
        if self.__class__ is sms_delivered_datetime:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(sms_delivered_datetime,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(sms_delivered_datetime,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_datetime=LIST(**{ 'elementclass': sms_datetime_list,             'length': 10 })
        self.__field_datetime.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 20}).readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_datetime(self):
        return self.__field_datetime.getvalue()

    def __setfield_datetime(self, value):
        if isinstance(value,LIST):
            self.__field_datetime=value
        else:
            self.__field_datetime=LIST(value,**{ 'elementclass': sms_datetime_list,             'length': 10 })

    def __delfield_datetime(self): del self.__field_datetime

    datetime=property(__getfield_datetime, __setfield_datetime, __delfield_datetime, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('datetime', self.__field_datetime, None)




class sms_body(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['msg_len', 'has_callback', 'has_priority', 'has_1byte', 'has_1byte2', 'has_40bytes', 'msg', 'callback_len', 'callback', 'priority', 'datetime', 'addr_len0', 'addr_len1', 'addr_len2', 'addr_len3', 'addr_len4', 'addr_len5', 'addr_len6', 'addr_len7', 'addr_len8', 'addr_len9', 'addr0', 'addr1', 'addr2', 'addr3', 'addr4', 'addr5', 'addr6', 'addr7', 'addr8', 'addr9', 'msg_stat']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(sms_body,self).__init__(**dict)
        if self.__class__ is sms_body:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(sms_body,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(sms_body,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed
        try: self.__field_msg_len
        except:
            self.__field_msg_len=UINT()
        try: self.__field_has_callback
        except:
            self.__field_has_callback=BOOL(**{ 'default': True })
        try: self.__field_has_priority
        except:
            self.__field_has_priority=BOOL(**{ 'default': False })
        try: self.__field_has_1byte
        except:
            self.__field_has_1byte=BOOL(**{ 'default': False })
        try: self.__field_has_1byte2
        except:
            self.__field_has_1byte2=BOOL(**{ 'default': True })
        try: self.__field_has_40bytes
        except:
            self.__field_has_40bytes=BOOL(**{ 'default': False })


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        DONTCARE(**{'sizeinbytes': 53}).readfrombuffer(buf)
        self.__field_msg=USTRING(**{ 'sizeinbytes': self.msg_len,                'encoding': ENCODING,                'terminator': None })
        self.__field_msg.readfrombuffer(buf)
        if self.has_callback:
            DONTCARE(**{'sizeinbytes': 3}).readfrombuffer(buf)
            self.__field_callback_len=UINT(**{'sizeinbytes': 1})
            self.__field_callback_len.readfrombuffer(buf)
            self.__field_callback=STRING(**{ 'sizeinbytes': self.callback_len,                   'terminator': None })
            self.__field_callback.readfrombuffer(buf)
        if self.has_priority:
            self.__field_priority=UINT(**{'sizeinbytes': 1})
            self.__field_priority.readfrombuffer(buf)
        if self.has_1byte:
            DONTCARE(**{'sizeinbytes': 1}).readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 40}).readfrombuffer(buf)
        self.__field_datetime=DateTime1(**{'sizeinbytes': 4})
        self.__field_datetime.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 17}).readfrombuffer(buf)
        self.__field_addr_len0=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len0.readfrombuffer(buf)
        self.__field_addr_len1=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len1.readfrombuffer(buf)
        self.__field_addr_len2=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len2.readfrombuffer(buf)
        self.__field_addr_len3=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len3.readfrombuffer(buf)
        self.__field_addr_len4=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len4.readfrombuffer(buf)
        self.__field_addr_len5=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len5.readfrombuffer(buf)
        self.__field_addr_len6=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len6.readfrombuffer(buf)
        self.__field_addr_len7=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len7.readfrombuffer(buf)
        self.__field_addr_len8=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len8.readfrombuffer(buf)
        self.__field_addr_len9=UINT(**{'sizeinbytes': 1})
        self.__field_addr_len9.readfrombuffer(buf)
        if self.addr_len0:
            self.__field_addr0=STRING(**{ 'sizeinbytes': self.addr_len0,                   'terminator': None })
            self.__field_addr0.readfrombuffer(buf)
        if self.addr_len1:
            self.__field_addr1=STRING(**{ 'sizeinbytes': self.addr_len1,                   'terminator': None })
            self.__field_addr1.readfrombuffer(buf)
        if self.addr_len2:
            self.__field_addr2=STRING(**{ 'sizeinbytes': self.addr_len2,                   'terminator': None })
            self.__field_addr2.readfrombuffer(buf)
        if self.addr_len3:
            self.__field_addr3=STRING(**{ 'sizeinbytes': self.addr_len3,                   'terminator': None })
            self.__field_addr3.readfrombuffer(buf)
        if self.addr_len4:
            self.__field_addr4=STRING(**{ 'sizeinbytes': self.addr_len4,                   'terminator': None })
            self.__field_addr4.readfrombuffer(buf)
        if self.addr_len5:
            self.__field_addr5=STRING(**{ 'sizeinbytes': self.addr_len5,                   'terminator': None })
            self.__field_addr5.readfrombuffer(buf)
        if self.addr_len6:
            self.__field_addr6=STRING(**{ 'sizeinbytes': self.addr_len6,                   'terminator': None })
            self.__field_addr6.readfrombuffer(buf)
        if self.addr_len7:
            self.__field_addr7=STRING(**{ 'sizeinbytes': self.addr_len7,                   'terminator': None })
            self.__field_addr7.readfrombuffer(buf)
        if self.addr_len8:
            self.__field_addr8=STRING(**{ 'sizeinbytes': self.addr_len8,                   'terminator': None })
            self.__field_addr8.readfrombuffer(buf)
        if self.addr_len9:
            self.__field_addr9=STRING(**{ 'sizeinbytes': self.addr_len9,                   'terminator': None })
            self.__field_addr9.readfrombuffer(buf)
        if not self.has_1byte and self.has_1byte2:
            DONTCARE(**{'sizeinbytes': 1}).readfrombuffer(buf)
        if self.has_1byte2:
            DONTCARE(**{'sizeinbytes': 1}).readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 81}).readfrombuffer(buf)
        if self.has_40bytes:
            DONTCARE(**{'sizeinbytes': 40}).readfrombuffer(buf)
        self.__field_msg_stat=LIST(**{ 'elementclass': sms_msg_stat_list,             'length': 10 })
        self.__field_msg_stat.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_msg_len(self):
        return self.__field_msg_len.getvalue()

    def __setfield_msg_len(self, value):
        if isinstance(value,UINT):
            self.__field_msg_len=value
        else:
            self.__field_msg_len=UINT(value,)

    def __delfield_msg_len(self): del self.__field_msg_len

    msg_len=property(__getfield_msg_len, __setfield_msg_len, __delfield_msg_len, None)

    def __getfield_has_callback(self):
        try: self.__field_has_callback
        except:
            self.__field_has_callback=BOOL(**{ 'default': True })
        return self.__field_has_callback.getvalue()

    def __setfield_has_callback(self, value):
        if isinstance(value,BOOL):
            self.__field_has_callback=value
        else:
            self.__field_has_callback=BOOL(value,**{ 'default': True })

    def __delfield_has_callback(self): del self.__field_has_callback

    has_callback=property(__getfield_has_callback, __setfield_has_callback, __delfield_has_callback, None)

    def __getfield_has_priority(self):
        try: self.__field_has_priority
        except:
            self.__field_has_priority=BOOL(**{ 'default': False })
        return self.__field_has_priority.getvalue()

    def __setfield_has_priority(self, value):
        if isinstance(value,BOOL):
            self.__field_has_priority=value
        else:
            self.__field_has_priority=BOOL(value,**{ 'default': False })

    def __delfield_has_priority(self): del self.__field_has_priority

    has_priority=property(__getfield_has_priority, __setfield_has_priority, __delfield_has_priority, None)

    def __getfield_has_1byte(self):
        try: self.__field_has_1byte
        except:
            self.__field_has_1byte=BOOL(**{ 'default': False })
        return self.__field_has_1byte.getvalue()

    def __setfield_has_1byte(self, value):
        if isinstance(value,BOOL):
            self.__field_has_1byte=value
        else:
            self.__field_has_1byte=BOOL(value,**{ 'default': False })

    def __delfield_has_1byte(self): del self.__field_has_1byte

    has_1byte=property(__getfield_has_1byte, __setfield_has_1byte, __delfield_has_1byte, None)

    def __getfield_has_1byte2(self):
        try: self.__field_has_1byte2
        except:
            self.__field_has_1byte2=BOOL(**{ 'default': True })
        return self.__field_has_1byte2.getvalue()

    def __setfield_has_1byte2(self, value):
        if isinstance(value,BOOL):
            self.__field_has_1byte2=value
        else:
            self.__field_has_1byte2=BOOL(value,**{ 'default': True })

    def __delfield_has_1byte2(self): del self.__field_has_1byte2

    has_1byte2=property(__getfield_has_1byte2, __setfield_has_1byte2, __delfield_has_1byte2, None)

    def __getfield_has_40bytes(self):
        try: self.__field_has_40bytes
        except:
            self.__field_has_40bytes=BOOL(**{ 'default': False })
        return self.__field_has_40bytes.getvalue()

    def __setfield_has_40bytes(self, value):
        if isinstance(value,BOOL):
            self.__field_has_40bytes=value
        else:
            self.__field_has_40bytes=BOOL(value,**{ 'default': False })

    def __delfield_has_40bytes(self): del self.__field_has_40bytes

    has_40bytes=property(__getfield_has_40bytes, __setfield_has_40bytes, __delfield_has_40bytes, None)

    def __getfield_msg(self):
        return self.__field_msg.getvalue()

    def __setfield_msg(self, value):
        if isinstance(value,USTRING):
            self.__field_msg=value
        else:
            self.__field_msg=USTRING(value,**{ 'sizeinbytes': self.msg_len,                'encoding': ENCODING,                'terminator': None })

    def __delfield_msg(self): del self.__field_msg

    msg=property(__getfield_msg, __setfield_msg, __delfield_msg, None)

    def __getfield_callback_len(self):
        return self.__field_callback_len.getvalue()

    def __setfield_callback_len(self, value):
        if isinstance(value,UINT):
            self.__field_callback_len=value
        else:
            self.__field_callback_len=UINT(value,**{'sizeinbytes': 1})

    def __delfield_callback_len(self): del self.__field_callback_len

    callback_len=property(__getfield_callback_len, __setfield_callback_len, __delfield_callback_len, None)

    def __getfield_callback(self):
        return self.__field_callback.getvalue()

    def __setfield_callback(self, value):
        if isinstance(value,STRING):
            self.__field_callback=value
        else:
            self.__field_callback=STRING(value,**{ 'sizeinbytes': self.callback_len,                   'terminator': None })

    def __delfield_callback(self): del self.__field_callback

    callback=property(__getfield_callback, __setfield_callback, __delfield_callback, None)

    def __getfield_priority(self):
        return self.__field_priority.getvalue()

    def __setfield_priority(self, value):
        if isinstance(value,UINT):
            self.__field_priority=value
        else:
            self.__field_priority=UINT(value,**{'sizeinbytes': 1})

    def __delfield_priority(self): del self.__field_priority

    priority=property(__getfield_priority, __setfield_priority, __delfield_priority, None)

    def __getfield_datetime(self):
        return self.__field_datetime.getvalue()

    def __setfield_datetime(self, value):
        if isinstance(value,DateTime1):
            self.__field_datetime=value
        else:
            self.__field_datetime=DateTime1(value,**{'sizeinbytes': 4})

    def __delfield_datetime(self): del self.__field_datetime

    datetime=property(__getfield_datetime, __setfield_datetime, __delfield_datetime, None)

    def __getfield_addr_len0(self):
        return self.__field_addr_len0.getvalue()

    def __setfield_addr_len0(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len0=value
        else:
            self.__field_addr_len0=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len0(self): del self.__field_addr_len0

    addr_len0=property(__getfield_addr_len0, __setfield_addr_len0, __delfield_addr_len0, None)

    def __getfield_addr_len1(self):
        return self.__field_addr_len1.getvalue()

    def __setfield_addr_len1(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len1=value
        else:
            self.__field_addr_len1=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len1(self): del self.__field_addr_len1

    addr_len1=property(__getfield_addr_len1, __setfield_addr_len1, __delfield_addr_len1, None)

    def __getfield_addr_len2(self):
        return self.__field_addr_len2.getvalue()

    def __setfield_addr_len2(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len2=value
        else:
            self.__field_addr_len2=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len2(self): del self.__field_addr_len2

    addr_len2=property(__getfield_addr_len2, __setfield_addr_len2, __delfield_addr_len2, None)

    def __getfield_addr_len3(self):
        return self.__field_addr_len3.getvalue()

    def __setfield_addr_len3(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len3=value
        else:
            self.__field_addr_len3=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len3(self): del self.__field_addr_len3

    addr_len3=property(__getfield_addr_len3, __setfield_addr_len3, __delfield_addr_len3, None)

    def __getfield_addr_len4(self):
        return self.__field_addr_len4.getvalue()

    def __setfield_addr_len4(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len4=value
        else:
            self.__field_addr_len4=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len4(self): del self.__field_addr_len4

    addr_len4=property(__getfield_addr_len4, __setfield_addr_len4, __delfield_addr_len4, None)

    def __getfield_addr_len5(self):
        return self.__field_addr_len5.getvalue()

    def __setfield_addr_len5(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len5=value
        else:
            self.__field_addr_len5=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len5(self): del self.__field_addr_len5

    addr_len5=property(__getfield_addr_len5, __setfield_addr_len5, __delfield_addr_len5, None)

    def __getfield_addr_len6(self):
        return self.__field_addr_len6.getvalue()

    def __setfield_addr_len6(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len6=value
        else:
            self.__field_addr_len6=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len6(self): del self.__field_addr_len6

    addr_len6=property(__getfield_addr_len6, __setfield_addr_len6, __delfield_addr_len6, None)

    def __getfield_addr_len7(self):
        return self.__field_addr_len7.getvalue()

    def __setfield_addr_len7(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len7=value
        else:
            self.__field_addr_len7=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len7(self): del self.__field_addr_len7

    addr_len7=property(__getfield_addr_len7, __setfield_addr_len7, __delfield_addr_len7, None)

    def __getfield_addr_len8(self):
        return self.__field_addr_len8.getvalue()

    def __setfield_addr_len8(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len8=value
        else:
            self.__field_addr_len8=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len8(self): del self.__field_addr_len8

    addr_len8=property(__getfield_addr_len8, __setfield_addr_len8, __delfield_addr_len8, None)

    def __getfield_addr_len9(self):
        return self.__field_addr_len9.getvalue()

    def __setfield_addr_len9(self, value):
        if isinstance(value,UINT):
            self.__field_addr_len9=value
        else:
            self.__field_addr_len9=UINT(value,**{'sizeinbytes': 1})

    def __delfield_addr_len9(self): del self.__field_addr_len9

    addr_len9=property(__getfield_addr_len9, __setfield_addr_len9, __delfield_addr_len9, None)

    def __getfield_addr0(self):
        return self.__field_addr0.getvalue()

    def __setfield_addr0(self, value):
        if isinstance(value,STRING):
            self.__field_addr0=value
        else:
            self.__field_addr0=STRING(value,**{ 'sizeinbytes': self.addr_len0,                   'terminator': None })

    def __delfield_addr0(self): del self.__field_addr0

    addr0=property(__getfield_addr0, __setfield_addr0, __delfield_addr0, None)

    def __getfield_addr1(self):
        return self.__field_addr1.getvalue()

    def __setfield_addr1(self, value):
        if isinstance(value,STRING):
            self.__field_addr1=value
        else:
            self.__field_addr1=STRING(value,**{ 'sizeinbytes': self.addr_len1,                   'terminator': None })

    def __delfield_addr1(self): del self.__field_addr1

    addr1=property(__getfield_addr1, __setfield_addr1, __delfield_addr1, None)

    def __getfield_addr2(self):
        return self.__field_addr2.getvalue()

    def __setfield_addr2(self, value):
        if isinstance(value,STRING):
            self.__field_addr2=value
        else:
            self.__field_addr2=STRING(value,**{ 'sizeinbytes': self.addr_len2,                   'terminator': None })

    def __delfield_addr2(self): del self.__field_addr2

    addr2=property(__getfield_addr2, __setfield_addr2, __delfield_addr2, None)

    def __getfield_addr3(self):
        return self.__field_addr3.getvalue()

    def __setfield_addr3(self, value):
        if isinstance(value,STRING):
            self.__field_addr3=value
        else:
            self.__field_addr3=STRING(value,**{ 'sizeinbytes': self.addr_len3,                   'terminator': None })

    def __delfield_addr3(self): del self.__field_addr3

    addr3=property(__getfield_addr3, __setfield_addr3, __delfield_addr3, None)

    def __getfield_addr4(self):
        return self.__field_addr4.getvalue()

    def __setfield_addr4(self, value):
        if isinstance(value,STRING):
            self.__field_addr4=value
        else:
            self.__field_addr4=STRING(value,**{ 'sizeinbytes': self.addr_len4,                   'terminator': None })

    def __delfield_addr4(self): del self.__field_addr4

    addr4=property(__getfield_addr4, __setfield_addr4, __delfield_addr4, None)

    def __getfield_addr5(self):
        return self.__field_addr5.getvalue()

    def __setfield_addr5(self, value):
        if isinstance(value,STRING):
            self.__field_addr5=value
        else:
            self.__field_addr5=STRING(value,**{ 'sizeinbytes': self.addr_len5,                   'terminator': None })

    def __delfield_addr5(self): del self.__field_addr5

    addr5=property(__getfield_addr5, __setfield_addr5, __delfield_addr5, None)

    def __getfield_addr6(self):
        return self.__field_addr6.getvalue()

    def __setfield_addr6(self, value):
        if isinstance(value,STRING):
            self.__field_addr6=value
        else:
            self.__field_addr6=STRING(value,**{ 'sizeinbytes': self.addr_len6,                   'terminator': None })

    def __delfield_addr6(self): del self.__field_addr6

    addr6=property(__getfield_addr6, __setfield_addr6, __delfield_addr6, None)

    def __getfield_addr7(self):
        return self.__field_addr7.getvalue()

    def __setfield_addr7(self, value):
        if isinstance(value,STRING):
            self.__field_addr7=value
        else:
            self.__field_addr7=STRING(value,**{ 'sizeinbytes': self.addr_len7,                   'terminator': None })

    def __delfield_addr7(self): del self.__field_addr7

    addr7=property(__getfield_addr7, __setfield_addr7, __delfield_addr7, None)

    def __getfield_addr8(self):
        return self.__field_addr8.getvalue()

    def __setfield_addr8(self, value):
        if isinstance(value,STRING):
            self.__field_addr8=value
        else:
            self.__field_addr8=STRING(value,**{ 'sizeinbytes': self.addr_len8,                   'terminator': None })

    def __delfield_addr8(self): del self.__field_addr8

    addr8=property(__getfield_addr8, __setfield_addr8, __delfield_addr8, None)

    def __getfield_addr9(self):
        return self.__field_addr9.getvalue()

    def __setfield_addr9(self, value):
        if isinstance(value,STRING):
            self.__field_addr9=value
        else:
            self.__field_addr9=STRING(value,**{ 'sizeinbytes': self.addr_len9,                   'terminator': None })

    def __delfield_addr9(self): del self.__field_addr9

    addr9=property(__getfield_addr9, __setfield_addr9, __delfield_addr9, None)

    def __getfield_msg_stat(self):
        return self.__field_msg_stat.getvalue()

    def __setfield_msg_stat(self, value):
        if isinstance(value,LIST):
            self.__field_msg_stat=value
        else:
            self.__field_msg_stat=LIST(value,**{ 'elementclass': sms_msg_stat_list,             'length': 10 })

    def __delfield_msg_stat(self): del self.__field_msg_stat

    msg_stat=property(__getfield_msg_stat, __setfield_msg_stat, __delfield_msg_stat, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('msg_len', self.__field_msg_len, None)
        yield ('has_callback', self.__field_has_callback, None)
        yield ('has_priority', self.__field_has_priority, None)
        yield ('has_1byte', self.__field_has_1byte, None)
        yield ('has_1byte2', self.__field_has_1byte2, None)
        yield ('has_40bytes', self.__field_has_40bytes, None)
        yield ('msg', self.__field_msg, None)
        if self.has_callback:
            yield ('callback_len', self.__field_callback_len, None)
            yield ('callback', self.__field_callback, None)
        if self.has_priority:
            yield ('priority', self.__field_priority, None)
        if self.has_1byte:
            pass
        yield ('datetime', self.__field_datetime, None)
        yield ('addr_len0', self.__field_addr_len0, None)
        yield ('addr_len1', self.__field_addr_len1, None)
        yield ('addr_len2', self.__field_addr_len2, None)
        yield ('addr_len3', self.__field_addr_len3, None)
        yield ('addr_len4', self.__field_addr_len4, None)
        yield ('addr_len5', self.__field_addr_len5, None)
        yield ('addr_len6', self.__field_addr_len6, None)
        yield ('addr_len7', self.__field_addr_len7, None)
        yield ('addr_len8', self.__field_addr_len8, None)
        yield ('addr_len9', self.__field_addr_len9, None)
        if self.addr_len0:
            yield ('addr0', self.__field_addr0, None)
        if self.addr_len1:
            yield ('addr1', self.__field_addr1, None)
        if self.addr_len2:
            yield ('addr2', self.__field_addr2, None)
        if self.addr_len3:
            yield ('addr3', self.__field_addr3, None)
        if self.addr_len4:
            yield ('addr4', self.__field_addr4, None)
        if self.addr_len5:
            yield ('addr5', self.__field_addr5, None)
        if self.addr_len6:
            yield ('addr6', self.__field_addr6, None)
        if self.addr_len7:
            yield ('addr7', self.__field_addr7, None)
        if self.addr_len8:
            yield ('addr8', self.__field_addr8, None)
        if self.addr_len9:
            yield ('addr9', self.__field_addr9, None)
        if not self.has_1byte and self.has_1byte2:
            pass
        if self.has_1byte2:
            pass
        if self.has_40bytes:
            pass
        yield ('msg_stat', self.__field_msg_stat, None)




class cl_list(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['index']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(cl_list,self).__init__(**dict)
        if self.__class__ is cl_list:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(cl_list,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(cl_list,kwargs)
        if len(args):
            dict2={'sizeinbytes': 2}
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_index=UINT(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_index=UINT(**{'sizeinbytes': 2})
        self.__field_index.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_index(self):
        return self.__field_index.getvalue()

    def __setfield_index(self, value):
        if isinstance(value,UINT):
            self.__field_index=value
        else:
            self.__field_index=UINT(value,**{'sizeinbytes': 2})

    def __delfield_index(self): del self.__field_index

    index=property(__getfield_index, __setfield_index, __delfield_index, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('index', self.__field_index, None)




class cl_index_file(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['incoming', 'outgoing', 'missed', 'incoming_count', 'outgoing_count', 'missed_count']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(cl_index_file,self).__init__(**dict)
        if self.__class__ is cl_index_file:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(cl_index_file,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(cl_index_file,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_incoming=LIST(**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })
        self.__field_incoming.readfrombuffer(buf)
        self.__field_outgoing=LIST(**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })
        self.__field_outgoing.readfrombuffer(buf)
        self.__field_missed=LIST(**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })
        self.__field_missed.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 992}).readfrombuffer(buf)
        self.__field_incoming_count=UINT(**{'sizeinbytes': 4})
        self.__field_incoming_count.readfrombuffer(buf)
        self.__field_outgoing_count=UINT(**{'sizeinbytes': 4})
        self.__field_outgoing_count.readfrombuffer(buf)
        self.__field_missed_count=UINT(**{'sizeinbytes': 4})
        self.__field_missed_count.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_incoming(self):
        return self.__field_incoming.getvalue()

    def __setfield_incoming(self, value):
        if isinstance(value,LIST):
            self.__field_incoming=value
        else:
            self.__field_incoming=LIST(value,**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })

    def __delfield_incoming(self): del self.__field_incoming

    incoming=property(__getfield_incoming, __setfield_incoming, __delfield_incoming, None)

    def __getfield_outgoing(self):
        return self.__field_outgoing.getvalue()

    def __setfield_outgoing(self, value):
        if isinstance(value,LIST):
            self.__field_outgoing=value
        else:
            self.__field_outgoing=LIST(value,**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })

    def __delfield_outgoing(self): del self.__field_outgoing

    outgoing=property(__getfield_outgoing, __setfield_outgoing, __delfield_outgoing, None)

    def __getfield_missed(self):
        return self.__field_missed.getvalue()

    def __setfield_missed(self, value):
        if isinstance(value,LIST):
            self.__field_missed=value
        else:
            self.__field_missed=LIST(value,**{ 'length': CL_MAX_ENTRIES,             'elementclass': cl_list })

    def __delfield_missed(self): del self.__field_missed

    missed=property(__getfield_missed, __setfield_missed, __delfield_missed, None)

    def __getfield_incoming_count(self):
        return self.__field_incoming_count.getvalue()

    def __setfield_incoming_count(self, value):
        if isinstance(value,UINT):
            self.__field_incoming_count=value
        else:
            self.__field_incoming_count=UINT(value,**{'sizeinbytes': 4})

    def __delfield_incoming_count(self): del self.__field_incoming_count

    incoming_count=property(__getfield_incoming_count, __setfield_incoming_count, __delfield_incoming_count, None)

    def __getfield_outgoing_count(self):
        return self.__field_outgoing_count.getvalue()

    def __setfield_outgoing_count(self, value):
        if isinstance(value,UINT):
            self.__field_outgoing_count=value
        else:
            self.__field_outgoing_count=UINT(value,**{'sizeinbytes': 4})

    def __delfield_outgoing_count(self): del self.__field_outgoing_count

    outgoing_count=property(__getfield_outgoing_count, __setfield_outgoing_count, __delfield_outgoing_count, None)

    def __getfield_missed_count(self):
        return self.__field_missed_count.getvalue()

    def __setfield_missed_count(self, value):
        if isinstance(value,UINT):
            self.__field_missed_count=value
        else:
            self.__field_missed_count=UINT(value,**{'sizeinbytes': 4})

    def __delfield_missed_count(self): del self.__field_missed_count

    missed_count=property(__getfield_missed_count, __setfield_missed_count, __delfield_missed_count, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('incoming', self.__field_incoming, None)
        yield ('outgoing', self.__field_outgoing, None)
        yield ('missed', self.__field_missed, None)
        yield ('incoming_count', self.__field_incoming_count, None)
        yield ('outgoing_count', self.__field_outgoing_count, None)
        yield ('missed_count', self.__field_missed_count, None)




class cl_file(BaseProtogenClass):
    # Read-From-Buffer-Only Class
    __fields=['cl_type', 'number', 'datetime', 'duration']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(cl_file,self).__init__(**dict)
        if self.__class__ is cl_file:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(cl_file,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(cl_file,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        raise NotImplementedError


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_cl_type=UINT(**{'sizeinbytes': 1})
        self.__field_cl_type.readfrombuffer(buf)
        self.__field_number=STRING(**{'sizeinbytes': 51,  'terminator': 0 })
        self.__field_number.readfrombuffer(buf)
        self.__field_datetime=DateTime1(**{'sizeinbytes': 4})
        self.__field_datetime.readfrombuffer(buf)
        DONTCARE(**{'sizeinbytes': 4}).readfrombuffer(buf)
        self.__field_duration=UINT(**{'sizeinbytes': 4})
        self.__field_duration.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_cl_type(self):
        return self.__field_cl_type.getvalue()

    def __setfield_cl_type(self, value):
        if isinstance(value,UINT):
            self.__field_cl_type=value
        else:
            self.__field_cl_type=UINT(value,**{'sizeinbytes': 1})

    def __delfield_cl_type(self): del self.__field_cl_type

    cl_type=property(__getfield_cl_type, __setfield_cl_type, __delfield_cl_type, None)

    def __getfield_number(self):
        return self.__field_number.getvalue()

    def __setfield_number(self, value):
        if isinstance(value,STRING):
            self.__field_number=value
        else:
            self.__field_number=STRING(value,**{'sizeinbytes': 51,  'terminator': 0 })

    def __delfield_number(self): del self.__field_number

    number=property(__getfield_number, __setfield_number, __delfield_number, None)

    def __getfield_datetime(self):
        return self.__field_datetime.getvalue()

    def __setfield_datetime(self, value):
        if isinstance(value,DateTime1):
            self.__field_datetime=value
        else:
            self.__field_datetime=DateTime1(value,**{'sizeinbytes': 4})

    def __delfield_datetime(self): del self.__field_datetime

    datetime=property(__getfield_datetime, __setfield_datetime, __delfield_datetime, None)

    def __getfield_duration(self):
        return self.__field_duration.getvalue()

    def __setfield_duration(self, value):
        if isinstance(value,UINT):
            self.__field_duration=value
        else:
            self.__field_duration=UINT(value,**{'sizeinbytes': 4})

    def __delfield_duration(self): del self.__field_duration

    duration=property(__getfield_duration, __setfield_duration, __delfield_duration, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('cl_type', self.__field_cl_type, None)
        yield ('number', self.__field_number, None)
        yield ('datetime', self.__field_datetime, None)
        yield ('duration', self.__field_duration, None)

    @property
    def valid(self):
        global CL_VALID_TYPE
        return bool(self.cl_type in CL_VALID_TYPE and self.number)




