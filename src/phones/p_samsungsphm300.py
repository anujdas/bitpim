# THIS FILE IS AUTOMATICALLY GENERATED.  EDIT THE SOURCE FILE NOT THIS ONE
# Text in this block is placed in the output file

from prototypes import *
from prototypes_samsung import *

max_pb_slots=312
max_pb_entries=312
user_pb_entry_range=xrange(1, 301)
max_number_entries=312

slot_file_name='nvm/nvm/pclink_tbl'
pb_file_name='nvm/nvm/dial_tbl'
number_file_name='nvm/nvm/dial'

# Number type
CELLTYPE=1
HOMETYPE=2
WORKTYPE=3
PAGERTYPE=4
OTHERTYPE=5
MAILTYPE=7
URLTYPE=8

# map all UINT fields to lsb version
UINT=UINTlsb
BOOL=BOOLlsb

AMSREGISTRY="ams/AmsRegistry"
ENDTRANSACTION="ams/EndTransaction"
RINGERPREFIX="ams/Ringers/cnts"
WALLPAPERPREFIX="ams/Screen Savers/cnts"

class pbslot(BaseProtogenClass):
    __fields=['valid', 'pbbook_index', 'c0', 'timestamp', 'pad']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbslot,self).__init__(**dict)
        if self.__class__ is pbslot:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbslot,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbslot,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_valid.writetobuffer(buf)
        try: self.__field_pbbook_index
        except:
            self.__field_pbbook_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_pbbook_index.writetobuffer(buf)
        if self.valid:
            try: self.__field_c0
            except:
                self.__field_c0=UINT(**{'sizeinbytes': 2,  'default': 0x0101 })
            self.__field_c0.writetobuffer(buf)
            try: self.__field_timestamp
            except:
                self.__field_timestamp=DateTime(**{'sizeinbytes': 4,  'default': DateTime.now() })
            self.__field_timestamp.writetobuffer(buf)
        else:
            try: self.__field_pad
            except:
                self.__field_pad=DATA(**{'sizeinbytes': 6,  'default': '\x00'*6 })
            self.__field_pad.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_valid.readfrombuffer(buf)
        self.__field_pbbook_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_pbbook_index.readfrombuffer(buf)
        if self.valid:
            self.__field_c0=UINT(**{'sizeinbytes': 2,  'default': 0x0101 })
            self.__field_c0.readfrombuffer(buf)
            self.__field_timestamp=DateTime(**{'sizeinbytes': 4,  'default': DateTime.now() })
            self.__field_timestamp.readfrombuffer(buf)
        else:
            self.__field_pad=DATA(**{'sizeinbytes': 6,  'default': '\x00'*6 })
            self.__field_pad.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_valid(self):
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_valid.getvalue()

    def __setfield_valid(self, value):
        if isinstance(value,UINT):
            self.__field_valid=value
        else:
            self.__field_valid=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_valid(self): del self.__field_valid

    valid=property(__getfield_valid, __setfield_valid, __delfield_valid, "1=valid entry")

    def __getfield_pbbook_index(self):
        try: self.__field_pbbook_index
        except:
            self.__field_pbbook_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_pbbook_index.getvalue()

    def __setfield_pbbook_index(self, value):
        if isinstance(value,UINT):
            self.__field_pbbook_index=value
        else:
            self.__field_pbbook_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_pbbook_index(self): del self.__field_pbbook_index

    pbbook_index=property(__getfield_pbbook_index, __setfield_pbbook_index, __delfield_pbbook_index, "index into pbbook")

    def __getfield_c0(self):
        try: self.__field_c0
        except:
            self.__field_c0=UINT(**{'sizeinbytes': 2,  'default': 0x0101 })
        return self.__field_c0.getvalue()

    def __setfield_c0(self, value):
        if isinstance(value,UINT):
            self.__field_c0=value
        else:
            self.__field_c0=UINT(value,**{'sizeinbytes': 2,  'default': 0x0101 })

    def __delfield_c0(self): del self.__field_c0

    c0=property(__getfield_c0, __setfield_c0, __delfield_c0, None)

    def __getfield_timestamp(self):
        try: self.__field_timestamp
        except:
            self.__field_timestamp=DateTime(**{'sizeinbytes': 4,  'default': DateTime.now() })
        return self.__field_timestamp.getvalue()

    def __setfield_timestamp(self, value):
        if isinstance(value,DateTime):
            self.__field_timestamp=value
        else:
            self.__field_timestamp=DateTime(value,**{'sizeinbytes': 4,  'default': DateTime.now() })

    def __delfield_timestamp(self): del self.__field_timestamp

    timestamp=property(__getfield_timestamp, __setfield_timestamp, __delfield_timestamp, "Last modified date/time")

    def __getfield_pad(self):
        try: self.__field_pad
        except:
            self.__field_pad=DATA(**{'sizeinbytes': 6,  'default': '\x00'*6 })
        return self.__field_pad.getvalue()

    def __setfield_pad(self, value):
        if isinstance(value,DATA):
            self.__field_pad=value
        else:
            self.__field_pad=DATA(value,**{'sizeinbytes': 6,  'default': '\x00'*6 })

    def __delfield_pad(self): del self.__field_pad

    pad=property(__getfield_pad, __setfield_pad, __delfield_pad, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('valid', self.__field_valid, "1=valid entry")
        yield ('pbbook_index', self.__field_pbbook_index, "index into pbbook")
        if self.valid:
            yield ('c0', self.__field_c0, None)
            yield ('timestamp', self.__field_timestamp, "Last modified date/time")
        else:
            yield ('pad', self.__field_pad, None)




class pbslots(BaseProtogenClass):
    __fields=['slot']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbslots,self).__init__(**dict)
        if self.__class__ is pbslots:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbslots,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbslots,kwargs)
        if len(args):
            dict2={ 'length': max_pb_slots, 'elementclass': pbslot }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_slot=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_slot
        except:
            self.__field_slot=LIST(**{ 'length': max_pb_slots, 'elementclass': pbslot })
        self.__field_slot.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_slot=LIST(**{ 'length': max_pb_slots, 'elementclass': pbslot })
        self.__field_slot.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_slot(self):
        try: self.__field_slot
        except:
            self.__field_slot=LIST(**{ 'length': max_pb_slots, 'elementclass': pbslot })
        return self.__field_slot.getvalue()

    def __setfield_slot(self, value):
        if isinstance(value,LIST):
            self.__field_slot=value
        else:
            self.__field_slot=LIST(value,**{ 'length': max_pb_slots, 'elementclass': pbslot })

    def __delfield_slot(self): del self.__field_slot

    slot=property(__getfield_slot, __setfield_slot, __delfield_slot, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('slot', self.__field_slot, None)




class pbentry(BaseProtogenClass):
    __fields=['valid', 'c1', 'c1', 'main_num_index', 'mobile_num_index', 'home_num_index', 'office_num_index', 'pager_num_index', 'fax_num_index', 'unused_index', 'email_index', 'url_index', 'name', 'group_num', 'nick', 'memo', 'pad']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbentry,self).__init__(**dict)
        if self.__class__ is pbentry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbentry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbentry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_valid.writetobuffer(buf)
        if self.valid:
            try: self.__field_c1
            except:
                self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0x01BF })
            self.__field_c1.writetobuffer(buf)
        else:
            try: self.__field_c1
            except:
                self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_c1.writetobuffer(buf)
        try: self.__field_main_num_index
        except:
            self.__field_main_num_index=UINT(**{'sizeinbytes': 2,  'default': self.mobile_num_index })
        self.__field_main_num_index.writetobuffer(buf)
        try: self.__field_mobile_num_index
        except:
            self.__field_mobile_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_mobile_num_index.writetobuffer(buf)
        try: self.__field_home_num_index
        except:
            self.__field_home_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_home_num_index.writetobuffer(buf)
        try: self.__field_office_num_index
        except:
            self.__field_office_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_office_num_index.writetobuffer(buf)
        try: self.__field_pager_num_index
        except:
            self.__field_pager_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_pager_num_index.writetobuffer(buf)
        try: self.__field_fax_num_index
        except:
            self.__field_fax_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_fax_num_index.writetobuffer(buf)
        try: self.__field_unused_index
        except:
            self.__field_unused_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_unused_index.writetobuffer(buf)
        try: self.__field_email_index
        except:
            self.__field_email_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_email_index.writetobuffer(buf)
        try: self.__field_url_index
        except:
            self.__field_url_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_url_index.writetobuffer(buf)
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 31,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_name.writetobuffer(buf)
        try: self.__field_group_num
        except:
            self.__field_group_num=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_group_num.writetobuffer(buf)
        try: self.__field_nick
        except:
            self.__field_nick=USTRING(**{'sizeinbytes': 22,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_nick.writetobuffer(buf)
        try: self.__field_memo
        except:
            self.__field_memo=USTRING(**{'sizeinbytes': 73,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_memo.writetobuffer(buf)
        try: self.__field_pad
        except:
            self.__field_pad=DATA(**{'sizeinbytes': 13,  'default': '\x00'*13 })
        self.__field_pad.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_valid.readfrombuffer(buf)
        if self.valid:
            self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0x01BF })
            self.__field_c1.readfrombuffer(buf)
        else:
            self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_c1.readfrombuffer(buf)
        self.__field_main_num_index=UINT(**{'sizeinbytes': 2,  'default': self.mobile_num_index })
        self.__field_main_num_index.readfrombuffer(buf)
        self.__field_mobile_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_mobile_num_index.readfrombuffer(buf)
        self.__field_home_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_home_num_index.readfrombuffer(buf)
        self.__field_office_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_office_num_index.readfrombuffer(buf)
        self.__field_pager_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_pager_num_index.readfrombuffer(buf)
        self.__field_fax_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_fax_num_index.readfrombuffer(buf)
        self.__field_unused_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_unused_index.readfrombuffer(buf)
        self.__field_email_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_email_index.readfrombuffer(buf)
        self.__field_url_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_url_index.readfrombuffer(buf)
        self.__field_name=USTRING(**{'sizeinbytes': 31,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_name.readfrombuffer(buf)
        self.__field_group_num=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_group_num.readfrombuffer(buf)
        self.__field_nick=USTRING(**{'sizeinbytes': 22,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_nick.readfrombuffer(buf)
        self.__field_memo=USTRING(**{'sizeinbytes': 73,  'pascal': True,                 'terminator': None,                 'default': '' })
        self.__field_memo.readfrombuffer(buf)
        self.__field_pad=DATA(**{'sizeinbytes': 13,  'default': '\x00'*13 })
        self.__field_pad.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_valid(self):
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_valid.getvalue()

    def __setfield_valid(self, value):
        if isinstance(value,UINT):
            self.__field_valid=value
        else:
            self.__field_valid=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_valid(self): del self.__field_valid

    valid=property(__getfield_valid, __setfield_valid, __delfield_valid, "1=valid entry")

    def __getfield_c1(self):
        try: self.__field_c1
        except:
            self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0x01BF })
        return self.__field_c1.getvalue()

    def __setfield_c1(self, value):
        if isinstance(value,UINT):
            self.__field_c1=value
        else:
            self.__field_c1=UINT(value,**{'sizeinbytes': 2,  'default': 0x01BF })

    def __delfield_c1(self): del self.__field_c1

    c1=property(__getfield_c1, __setfield_c1, __delfield_c1, None)

    def __getfield_c1(self):
        try: self.__field_c1
        except:
            self.__field_c1=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_c1.getvalue()

    def __setfield_c1(self, value):
        if isinstance(value,UINT):
            self.__field_c1=value
        else:
            self.__field_c1=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_c1(self): del self.__field_c1

    c1=property(__getfield_c1, __setfield_c1, __delfield_c1, None)

    def __getfield_main_num_index(self):
        try: self.__field_main_num_index
        except:
            self.__field_main_num_index=UINT(**{'sizeinbytes': 2,  'default': self.mobile_num_index })
        return self.__field_main_num_index.getvalue()

    def __setfield_main_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_main_num_index=value
        else:
            self.__field_main_num_index=UINT(value,**{'sizeinbytes': 2,  'default': self.mobile_num_index })

    def __delfield_main_num_index(self): del self.__field_main_num_index

    main_num_index=property(__getfield_main_num_index, __setfield_main_num_index, __delfield_main_num_index, None)

    def __getfield_mobile_num_index(self):
        try: self.__field_mobile_num_index
        except:
            self.__field_mobile_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_mobile_num_index.getvalue()

    def __setfield_mobile_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_mobile_num_index=value
        else:
            self.__field_mobile_num_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_mobile_num_index(self): del self.__field_mobile_num_index

    mobile_num_index=property(__getfield_mobile_num_index, __setfield_mobile_num_index, __delfield_mobile_num_index, None)

    def __getfield_home_num_index(self):
        try: self.__field_home_num_index
        except:
            self.__field_home_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_home_num_index.getvalue()

    def __setfield_home_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_home_num_index=value
        else:
            self.__field_home_num_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_home_num_index(self): del self.__field_home_num_index

    home_num_index=property(__getfield_home_num_index, __setfield_home_num_index, __delfield_home_num_index, None)

    def __getfield_office_num_index(self):
        try: self.__field_office_num_index
        except:
            self.__field_office_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_office_num_index.getvalue()

    def __setfield_office_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_office_num_index=value
        else:
            self.__field_office_num_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_office_num_index(self): del self.__field_office_num_index

    office_num_index=property(__getfield_office_num_index, __setfield_office_num_index, __delfield_office_num_index, None)

    def __getfield_pager_num_index(self):
        try: self.__field_pager_num_index
        except:
            self.__field_pager_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_pager_num_index.getvalue()

    def __setfield_pager_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_pager_num_index=value
        else:
            self.__field_pager_num_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_pager_num_index(self): del self.__field_pager_num_index

    pager_num_index=property(__getfield_pager_num_index, __setfield_pager_num_index, __delfield_pager_num_index, None)

    def __getfield_fax_num_index(self):
        try: self.__field_fax_num_index
        except:
            self.__field_fax_num_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_fax_num_index.getvalue()

    def __setfield_fax_num_index(self, value):
        if isinstance(value,UINT):
            self.__field_fax_num_index=value
        else:
            self.__field_fax_num_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_fax_num_index(self): del self.__field_fax_num_index

    fax_num_index=property(__getfield_fax_num_index, __setfield_fax_num_index, __delfield_fax_num_index, None)

    def __getfield_unused_index(self):
        try: self.__field_unused_index
        except:
            self.__field_unused_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_unused_index.getvalue()

    def __setfield_unused_index(self, value):
        if isinstance(value,UINT):
            self.__field_unused_index=value
        else:
            self.__field_unused_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_unused_index(self): del self.__field_unused_index

    unused_index=property(__getfield_unused_index, __setfield_unused_index, __delfield_unused_index, None)

    def __getfield_email_index(self):
        try: self.__field_email_index
        except:
            self.__field_email_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_email_index.getvalue()

    def __setfield_email_index(self, value):
        if isinstance(value,UINT):
            self.__field_email_index=value
        else:
            self.__field_email_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_email_index(self): del self.__field_email_index

    email_index=property(__getfield_email_index, __setfield_email_index, __delfield_email_index, None)

    def __getfield_url_index(self):
        try: self.__field_url_index
        except:
            self.__field_url_index=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_url_index.getvalue()

    def __setfield_url_index(self, value):
        if isinstance(value,UINT):
            self.__field_url_index=value
        else:
            self.__field_url_index=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_url_index(self): del self.__field_url_index

    url_index=property(__getfield_url_index, __setfield_url_index, __delfield_url_index, None)

    def __getfield_name(self):
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 31,  'pascal': True,                 'terminator': None,                 'default': '' })
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{'sizeinbytes': 31,  'pascal': True,                 'terminator': None,                 'default': '' })

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_group_num(self):
        try: self.__field_group_num
        except:
            self.__field_group_num=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_group_num.getvalue()

    def __setfield_group_num(self, value):
        if isinstance(value,UINT):
            self.__field_group_num=value
        else:
            self.__field_group_num=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_group_num(self): del self.__field_group_num

    group_num=property(__getfield_group_num, __setfield_group_num, __delfield_group_num, None)

    def __getfield_nick(self):
        try: self.__field_nick
        except:
            self.__field_nick=USTRING(**{'sizeinbytes': 22,  'pascal': True,                 'terminator': None,                 'default': '' })
        return self.__field_nick.getvalue()

    def __setfield_nick(self, value):
        if isinstance(value,USTRING):
            self.__field_nick=value
        else:
            self.__field_nick=USTRING(value,**{'sizeinbytes': 22,  'pascal': True,                 'terminator': None,                 'default': '' })

    def __delfield_nick(self): del self.__field_nick

    nick=property(__getfield_nick, __setfield_nick, __delfield_nick, None)

    def __getfield_memo(self):
        try: self.__field_memo
        except:
            self.__field_memo=USTRING(**{'sizeinbytes': 73,  'pascal': True,                 'terminator': None,                 'default': '' })
        return self.__field_memo.getvalue()

    def __setfield_memo(self, value):
        if isinstance(value,USTRING):
            self.__field_memo=value
        else:
            self.__field_memo=USTRING(value,**{'sizeinbytes': 73,  'pascal': True,                 'terminator': None,                 'default': '' })

    def __delfield_memo(self): del self.__field_memo

    memo=property(__getfield_memo, __setfield_memo, __delfield_memo, None)

    def __getfield_pad(self):
        try: self.__field_pad
        except:
            self.__field_pad=DATA(**{'sizeinbytes': 13,  'default': '\x00'*13 })
        return self.__field_pad.getvalue()

    def __setfield_pad(self, value):
        if isinstance(value,DATA):
            self.__field_pad=value
        else:
            self.__field_pad=DATA(value,**{'sizeinbytes': 13,  'default': '\x00'*13 })

    def __delfield_pad(self): del self.__field_pad

    pad=property(__getfield_pad, __setfield_pad, __delfield_pad, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('valid', self.__field_valid, "1=valid entry")
        if self.valid:
            yield ('c1', self.__field_c1, None)
        else:
            yield ('c1', self.__field_c1, None)
        yield ('main_num_index', self.__field_main_num_index, None)
        yield ('mobile_num_index', self.__field_mobile_num_index, None)
        yield ('home_num_index', self.__field_home_num_index, None)
        yield ('office_num_index', self.__field_office_num_index, None)
        yield ('pager_num_index', self.__field_pager_num_index, None)
        yield ('fax_num_index', self.__field_fax_num_index, None)
        yield ('unused_index', self.__field_unused_index, None)
        yield ('email_index', self.__field_email_index, None)
        yield ('url_index', self.__field_url_index, None)
        yield ('name', self.__field_name, None)
        yield ('group_num', self.__field_group_num, None)
        yield ('nick', self.__field_nick, None)
        yield ('memo', self.__field_memo, None)
        yield ('pad', self.__field_pad, None)




class pbbook(BaseProtogenClass):
    __fields=['entry']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbbook,self).__init__(**dict)
        if self.__class__ is pbbook:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbbook,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbbook,kwargs)
        if len(args):
            dict2={ 'length': max_pb_entries,               'elementclass': pbentry,               'createdefault': True }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_entry=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_entry
        except:
            self.__field_entry=LIST(**{ 'length': max_pb_entries,               'elementclass': pbentry,               'createdefault': True })
        self.__field_entry.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_entry=LIST(**{ 'length': max_pb_entries,               'elementclass': pbentry,               'createdefault': True })
        self.__field_entry.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_entry(self):
        try: self.__field_entry
        except:
            self.__field_entry=LIST(**{ 'length': max_pb_entries,               'elementclass': pbentry,               'createdefault': True })
        return self.__field_entry.getvalue()

    def __setfield_entry(self, value):
        if isinstance(value,LIST):
            self.__field_entry=value
        else:
            self.__field_entry=LIST(value,**{ 'length': max_pb_entries,               'elementclass': pbentry,               'createdefault': True })

    def __delfield_entry(self): del self.__field_entry

    entry=property(__getfield_entry, __setfield_entry, __delfield_entry, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('entry', self.__field_entry, None)




class number(BaseProtogenClass):
    __fields=['valid', 'c0', 'name', 'number_type']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(number,self).__init__(**dict)
        if self.__class__ is number:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(number,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(number,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_valid.writetobuffer(buf)
        try: self.__field_c0
        except:
            self.__field_c0=UINT(**{'sizeinbytes': 4,  'default': 0 })
        self.__field_c0.writetobuffer(buf)
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 74,  'pascal': True,                  'terminator': None,                  'default': '' })
        self.__field_name.writetobuffer(buf)
        try: self.__field_number_type
        except:
            self.__field_number_type=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_number_type.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_valid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_valid.readfrombuffer(buf)
        self.__field_c0=UINT(**{'sizeinbytes': 4,  'default': 0 })
        self.__field_c0.readfrombuffer(buf)
        self.__field_name=USTRING(**{'sizeinbytes': 74,  'pascal': True,                  'terminator': None,                  'default': '' })
        self.__field_name.readfrombuffer(buf)
        self.__field_number_type=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_number_type.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_valid(self):
        try: self.__field_valid
        except:
            self.__field_valid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_valid.getvalue()

    def __setfield_valid(self, value):
        if isinstance(value,UINT):
            self.__field_valid=value
        else:
            self.__field_valid=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_valid(self): del self.__field_valid

    valid=property(__getfield_valid, __setfield_valid, __delfield_valid, "1=valid entry")

    def __getfield_c0(self):
        try: self.__field_c0
        except:
            self.__field_c0=UINT(**{'sizeinbytes': 4,  'default': 0 })
        return self.__field_c0.getvalue()

    def __setfield_c0(self, value):
        if isinstance(value,UINT):
            self.__field_c0=value
        else:
            self.__field_c0=UINT(value,**{'sizeinbytes': 4,  'default': 0 })

    def __delfield_c0(self): del self.__field_c0

    c0=property(__getfield_c0, __setfield_c0, __delfield_c0, None)

    def __getfield_name(self):
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 74,  'pascal': True,                  'terminator': None,                  'default': '' })
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{'sizeinbytes': 74,  'pascal': True,                  'terminator': None,                  'default': '' })

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_number_type(self):
        try: self.__field_number_type
        except:
            self.__field_number_type=UINT(**{'sizeinbytes': 1,  'default': 0 })
        return self.__field_number_type.getvalue()

    def __setfield_number_type(self, value):
        if isinstance(value,UINT):
            self.__field_number_type=value
        else:
            self.__field_number_type=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_number_type(self): del self.__field_number_type

    number_type=property(__getfield_number_type, __setfield_number_type, __delfield_number_type, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('valid', self.__field_valid, "1=valid entry")
        yield ('c0', self.__field_c0, None)
        yield ('name', self.__field_name, None)
        yield ('number_type', self.__field_number_type, None)




class numbers(BaseProtogenClass):
    __fields=['entry']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(numbers,self).__init__(**dict)
        if self.__class__ is numbers:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(numbers,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(numbers,kwargs)
        if len(args):
            dict2={ 'length': max_number_entries,              'elementclass': number,              'createdefault': True }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_entry=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_entry
        except:
            self.__field_entry=LIST(**{ 'length': max_number_entries,              'elementclass': number,              'createdefault': True })
        self.__field_entry.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_entry=LIST(**{ 'length': max_number_entries,              'elementclass': number,              'createdefault': True })
        self.__field_entry.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_entry(self):
        try: self.__field_entry
        except:
            self.__field_entry=LIST(**{ 'length': max_number_entries,              'elementclass': number,              'createdefault': True })
        return self.__field_entry.getvalue()

    def __setfield_entry(self, value):
        if isinstance(value,LIST):
            self.__field_entry=value
        else:
            self.__field_entry=LIST(value,**{ 'length': max_number_entries,              'elementclass': number,              'createdefault': True })

    def __delfield_entry(self): del self.__field_entry

    entry=property(__getfield_entry, __setfield_entry, __delfield_entry, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('entry', self.__field_entry, None)




class amsregistry(BaseProtogenClass):
    __fields=['dunno0', 'info', 'dunno1', 'strings', 'dunno2', 'nfiles', 'dunno3']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(amsregistry,self).__init__(**dict)
        if self.__class__ is amsregistry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(amsregistry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(amsregistry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_dunno0.writetobuffer(buf)
        self.__field_info.writetobuffer(buf)
        self.__field_dunno1.writetobuffer(buf)
        self.__field_strings.writetobuffer(buf)
        self.__field_dunno2.writetobuffer(buf)
        self.__field_nfiles.writetobuffer(buf)
        self.__field_dunno3.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_dunno0=DATA(**{'sizeinbytes': 900})
        self.__field_dunno0.readfrombuffer(buf)
        self.__field_info=LIST(**{'elementclass': _gen_p_samsungsphm300_105, 'length': 320})
        self.__field_info.readfrombuffer(buf)
        self.__field_dunno1=DATA(**{'sizeinbytes': 2000})
        self.__field_dunno1.readfrombuffer(buf)
        self.__field_strings=DATA(**{'sizeinbytes': 23000})
        self.__field_strings.readfrombuffer(buf)
        self.__field_dunno2=UINT(**{'sizeinbytes': 4})
        self.__field_dunno2.readfrombuffer(buf)
        self.__field_nfiles=UINT(**{'sizeinbytes': 2})
        self.__field_nfiles.readfrombuffer(buf)
        self.__field_dunno3=DATA()
        self.__field_dunno3.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_dunno0(self):
        return self.__field_dunno0.getvalue()

    def __setfield_dunno0(self, value):
        if isinstance(value,DATA):
            self.__field_dunno0=value
        else:
            self.__field_dunno0=DATA(value,**{'sizeinbytes': 900})

    def __delfield_dunno0(self): del self.__field_dunno0

    dunno0=property(__getfield_dunno0, __setfield_dunno0, __delfield_dunno0, None)

    def __getfield_info(self):
        return self.__field_info.getvalue()

    def __setfield_info(self, value):
        if isinstance(value,LIST):
            self.__field_info=value
        else:
            self.__field_info=LIST(value,**{'elementclass': _gen_p_samsungsphm300_105, 'length': 320})

    def __delfield_info(self): del self.__field_info

    info=property(__getfield_info, __setfield_info, __delfield_info, None)

    def __getfield_dunno1(self):
        return self.__field_dunno1.getvalue()

    def __setfield_dunno1(self, value):
        if isinstance(value,DATA):
            self.__field_dunno1=value
        else:
            self.__field_dunno1=DATA(value,**{'sizeinbytes': 2000})

    def __delfield_dunno1(self): del self.__field_dunno1

    dunno1=property(__getfield_dunno1, __setfield_dunno1, __delfield_dunno1, None)

    def __getfield_strings(self):
        return self.__field_strings.getvalue()

    def __setfield_strings(self, value):
        if isinstance(value,DATA):
            self.__field_strings=value
        else:
            self.__field_strings=DATA(value,**{'sizeinbytes': 23000})

    def __delfield_strings(self): del self.__field_strings

    strings=property(__getfield_strings, __setfield_strings, __delfield_strings, None)

    def __getfield_dunno2(self):
        return self.__field_dunno2.getvalue()

    def __setfield_dunno2(self, value):
        if isinstance(value,UINT):
            self.__field_dunno2=value
        else:
            self.__field_dunno2=UINT(value,**{'sizeinbytes': 4})

    def __delfield_dunno2(self): del self.__field_dunno2

    dunno2=property(__getfield_dunno2, __setfield_dunno2, __delfield_dunno2, None)

    def __getfield_nfiles(self):
        return self.__field_nfiles.getvalue()

    def __setfield_nfiles(self, value):
        if isinstance(value,UINT):
            self.__field_nfiles=value
        else:
            self.__field_nfiles=UINT(value,**{'sizeinbytes': 2})

    def __delfield_nfiles(self): del self.__field_nfiles

    nfiles=property(__getfield_nfiles, __setfield_nfiles, __delfield_nfiles, None)

    def __getfield_dunno3(self):
        return self.__field_dunno3.getvalue()

    def __setfield_dunno3(self, value):
        if isinstance(value,DATA):
            self.__field_dunno3=value
        else:
            self.__field_dunno3=DATA(value,)

    def __delfield_dunno3(self): del self.__field_dunno3

    dunno3=property(__getfield_dunno3, __setfield_dunno3, __delfield_dunno3, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('dunno0', self.__field_dunno0, None)
        yield ('info', self.__field_info, None)
        yield ('dunno1', self.__field_dunno1, None)
        yield ('strings', self.__field_strings, None)
        yield ('dunno2', self.__field_dunno2, None)
        yield ('nfiles', self.__field_nfiles, None)
        yield ('dunno3', self.__field_dunno3, None)

    def getstring(self, ptr):
        # Return the 0-terminated string starting index ptr from field strings
        try:
            return self.strings[ptr:self.strings.index('\x00', ptr)]
        except ValueError:
            return ''
    def dir(self, idx):
        return self.getstring(self.info[idx].dir_ptr)
    def name(self, idx):
        return self.getstring(self.info[idx].name_ptr)
    def mimetype(self, idx):
        return self.getstring(self.info[idx].mimetype_ptr)
    def version(self, idx):
        return self.getstring(self.info[idx].version_ptr)
    def vendor(self, idx):
        return self.getstring(self.info[idx].vendor_ptr)




class _gen_p_samsungsphm300_105(BaseProtogenClass):
    'Anonymous inner class'
    __fields=['dir_ptr', 'num2', 'name_ptr', 'version_ptr', 'vendor_ptr', 'downloaddomain_ptr', 'num7', 'filetype', 'mimetype_ptr', 'num12']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(_gen_p_samsungsphm300_105,self).__init__(**dict)
        if self.__class__ is _gen_p_samsungsphm300_105:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(_gen_p_samsungsphm300_105,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(_gen_p_samsungsphm300_105,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_dir_ptr.writetobuffer(buf)
        self.__field_num2.writetobuffer(buf)
        self.__field_name_ptr.writetobuffer(buf)
        self.__field_version_ptr.writetobuffer(buf)
        self.__field_vendor_ptr.writetobuffer(buf)
        self.__field_downloaddomain_ptr.writetobuffer(buf)
        self.__field_num7.writetobuffer(buf)
        self.__field_filetype.writetobuffer(buf)
        self.__field_mimetype_ptr.writetobuffer(buf)
        self.__field_num12.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_dir_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_dir_ptr.readfrombuffer(buf)
        self.__field_num2=UINT(**{'sizeinbytes': 2})
        self.__field_num2.readfrombuffer(buf)
        self.__field_name_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_name_ptr.readfrombuffer(buf)
        self.__field_version_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_version_ptr.readfrombuffer(buf)
        self.__field_vendor_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_vendor_ptr.readfrombuffer(buf)
        self.__field_downloaddomain_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_downloaddomain_ptr.readfrombuffer(buf)
        self.__field_num7=DATA(**{'sizeinbytes': 8})
        self.__field_num7.readfrombuffer(buf)
        self.__field_filetype=UINT(**{'sizeinbytes': 2})
        self.__field_filetype.readfrombuffer(buf)
        self.__field_mimetype_ptr=UINT(**{'sizeinbytes': 2})
        self.__field_mimetype_ptr.readfrombuffer(buf)
        self.__field_num12=DATA(**{'sizeinbytes': 12})
        self.__field_num12.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_dir_ptr(self):
        return self.__field_dir_ptr.getvalue()

    def __setfield_dir_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_dir_ptr=value
        else:
            self.__field_dir_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_dir_ptr(self): del self.__field_dir_ptr

    dir_ptr=property(__getfield_dir_ptr, __setfield_dir_ptr, __delfield_dir_ptr, None)

    def __getfield_num2(self):
        return self.__field_num2.getvalue()

    def __setfield_num2(self, value):
        if isinstance(value,UINT):
            self.__field_num2=value
        else:
            self.__field_num2=UINT(value,**{'sizeinbytes': 2})

    def __delfield_num2(self): del self.__field_num2

    num2=property(__getfield_num2, __setfield_num2, __delfield_num2, None)

    def __getfield_name_ptr(self):
        return self.__field_name_ptr.getvalue()

    def __setfield_name_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_name_ptr=value
        else:
            self.__field_name_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_name_ptr(self): del self.__field_name_ptr

    name_ptr=property(__getfield_name_ptr, __setfield_name_ptr, __delfield_name_ptr, None)

    def __getfield_version_ptr(self):
        return self.__field_version_ptr.getvalue()

    def __setfield_version_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_version_ptr=value
        else:
            self.__field_version_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_version_ptr(self): del self.__field_version_ptr

    version_ptr=property(__getfield_version_ptr, __setfield_version_ptr, __delfield_version_ptr, None)

    def __getfield_vendor_ptr(self):
        return self.__field_vendor_ptr.getvalue()

    def __setfield_vendor_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_vendor_ptr=value
        else:
            self.__field_vendor_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_vendor_ptr(self): del self.__field_vendor_ptr

    vendor_ptr=property(__getfield_vendor_ptr, __setfield_vendor_ptr, __delfield_vendor_ptr, None)

    def __getfield_downloaddomain_ptr(self):
        return self.__field_downloaddomain_ptr.getvalue()

    def __setfield_downloaddomain_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_downloaddomain_ptr=value
        else:
            self.__field_downloaddomain_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_downloaddomain_ptr(self): del self.__field_downloaddomain_ptr

    downloaddomain_ptr=property(__getfield_downloaddomain_ptr, __setfield_downloaddomain_ptr, __delfield_downloaddomain_ptr, None)

    def __getfield_num7(self):
        return self.__field_num7.getvalue()

    def __setfield_num7(self, value):
        if isinstance(value,DATA):
            self.__field_num7=value
        else:
            self.__field_num7=DATA(value,**{'sizeinbytes': 8})

    def __delfield_num7(self): del self.__field_num7

    num7=property(__getfield_num7, __setfield_num7, __delfield_num7, None)

    def __getfield_filetype(self):
        return self.__field_filetype.getvalue()

    def __setfield_filetype(self, value):
        if isinstance(value,UINT):
            self.__field_filetype=value
        else:
            self.__field_filetype=UINT(value,**{'sizeinbytes': 2})

    def __delfield_filetype(self): del self.__field_filetype

    filetype=property(__getfield_filetype, __setfield_filetype, __delfield_filetype, "12: Ringer, 13 Screen Saver, 15 Apps")

    def __getfield_mimetype_ptr(self):
        return self.__field_mimetype_ptr.getvalue()

    def __setfield_mimetype_ptr(self, value):
        if isinstance(value,UINT):
            self.__field_mimetype_ptr=value
        else:
            self.__field_mimetype_ptr=UINT(value,**{'sizeinbytes': 2})

    def __delfield_mimetype_ptr(self): del self.__field_mimetype_ptr

    mimetype_ptr=property(__getfield_mimetype_ptr, __setfield_mimetype_ptr, __delfield_mimetype_ptr, None)

    def __getfield_num12(self):
        return self.__field_num12.getvalue()

    def __setfield_num12(self, value):
        if isinstance(value,DATA):
            self.__field_num12=value
        else:
            self.__field_num12=DATA(value,**{'sizeinbytes': 12})

    def __delfield_num12(self): del self.__field_num12

    num12=property(__getfield_num12, __setfield_num12, __delfield_num12, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('dir_ptr', self.__field_dir_ptr, None)
        yield ('num2', self.__field_num2, None)
        yield ('name_ptr', self.__field_name_ptr, None)
        yield ('version_ptr', self.__field_version_ptr, None)
        yield ('vendor_ptr', self.__field_vendor_ptr, None)
        yield ('downloaddomain_ptr', self.__field_downloaddomain_ptr, None)
        yield ('num7', self.__field_num7, None)
        yield ('filetype', self.__field_filetype, "12: Ringer, 13 Screen Saver, 15 Apps")
        yield ('mimetype_ptr', self.__field_mimetype_ptr, None)
        yield ('num12', self.__field_num12, None)




