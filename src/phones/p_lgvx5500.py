# THIS FILE IS AUTOMATICALLY GENERATED.  EDIT THE SOURCE FILE NOT THIS ONE

"""Various descriptions of data specific to LG VX5500"""

from p_lgvx9700 import *
# same as the VX-9700 except as noted below

class pbfileentry(BaseProtogenClass):
    __fields=['entry_tag', 'mod_date', 'unk0', 'entry_number1', 'entry_number0', 'name', 'group', 'emails', 'ringtone', 'wallpaper', 'numbertypes', 'numberindices', 'memo', 'exit_tag', 'dontcare']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbfileentry,self).__init__(**dict)
        if self.__class__ is pbfileentry:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbfileentry,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbfileentry,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_entry_tag
        except:
            self.__field_entry_tag=STRING(**{'sizeinbytes': 5,  'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '\xff\xff\xff\xff\xff' })
        self.__field_entry_tag.writetobuffer(buf)
        if self.entry_tag==PB_ENTRY_SOR:
            try: self.__field_mod_date
            except:
                self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
            self.__field_mod_date.writetobuffer(buf)
            try: self.__field_unk0
            except:
                self.__field_unk0=STRING(**{'sizeinbytes': 6,  'terminator': None, 'default': '\xff\xff\xff\xff\xff\xff' })
            self.__field_unk0.writetobuffer(buf)
            self.__field_entry_number1.writetobuffer(buf)
            self.__field_entry_number0.writetobuffer(buf)
            try: self.__field_name
            except:
                self.__field_name=USTRING(**{'sizeinbytes': 66,  'encoding': 'utf_16_le', 'raiseonunterminatedread': False, 'raiseontruncate': False })
            self.__field_name.writetobuffer(buf)
            try: self.__field_group
            except:
                self.__field_group=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_group.writetobuffer(buf)
            try: self.__field_emails
            except:
                self.__field_emails=LIST(**{'elementclass': _gen_p_lgvx5500_29, 'length': NUMEMAILS})
            self.__field_emails.writetobuffer(buf)
            try: self.__field_ringtone
            except:
                self.__field_ringtone=UINT(**{'sizeinbytes': 2,  'default': 0xffff })
            self.__field_ringtone.writetobuffer(buf)
            try: self.__field_wallpaper
            except:
                self.__field_wallpaper=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_wallpaper.writetobuffer(buf)
            try: self.__field_numbertypes
            except:
                self.__field_numbertypes=LIST(**{'elementclass': _gen_p_lgvx5500_33, 'length': NUMPHONENUMBERS})
            self.__field_numbertypes.writetobuffer(buf)
            try: self.__field_numberindices
            except:
                self.__field_numberindices=LIST(**{'elementclass': _gen_p_lgvx5500_35, 'length': NUMPHONENUMBERS})
            self.__field_numberindices.writetobuffer(buf)
            try: self.__field_memo
            except:
                self.__field_memo=USTRING(**{'sizeinbytes': 36,  'raiseonunterminatedread': False, 'default': '', 'encoding': PHONE_ENCODING })
            self.__field_memo.writetobuffer(buf)
            try: self.__field_exit_tag
            except:
                self.__field_exit_tag=USTRING(**{'sizeinbytes': 6,  'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '</PE>'})
            self.__field_exit_tag.writetobuffer(buf)
        else:
            try: self.__field_dontcare
            except:
                self.__field_dontcare=DATA(**{'sizeinbytes': 251,  'default': '\xff'*251 })
            self.__field_dontcare.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_entry_tag=STRING(**{'sizeinbytes': 5,  'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '\xff\xff\xff\xff\xff' })
        self.__field_entry_tag.readfrombuffer(buf)
        if self.entry_tag==PB_ENTRY_SOR:
            self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
            self.__field_mod_date.readfrombuffer(buf)
            self.__field_unk0=STRING(**{'sizeinbytes': 6,  'terminator': None, 'default': '\xff\xff\xff\xff\xff\xff' })
            self.__field_unk0.readfrombuffer(buf)
            self.__field_entry_number1=UINT(**{'sizeinbytes': 4})
            self.__field_entry_number1.readfrombuffer(buf)
            self.__field_entry_number0=UINT(**{'sizeinbytes': 2})
            self.__field_entry_number0.readfrombuffer(buf)
            self.__field_name=USTRING(**{'sizeinbytes': 66,  'encoding': 'utf_16_le', 'raiseonunterminatedread': False, 'raiseontruncate': False })
            self.__field_name.readfrombuffer(buf)
            self.__field_group=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_group.readfrombuffer(buf)
            self.__field_emails=LIST(**{'elementclass': _gen_p_lgvx5500_29, 'length': NUMEMAILS})
            self.__field_emails.readfrombuffer(buf)
            self.__field_ringtone=UINT(**{'sizeinbytes': 2,  'default': 0xffff })
            self.__field_ringtone.readfrombuffer(buf)
            self.__field_wallpaper=UINT(**{'sizeinbytes': 2,  'default': 0 })
            self.__field_wallpaper.readfrombuffer(buf)
            self.__field_numbertypes=LIST(**{'elementclass': _gen_p_lgvx5500_33, 'length': NUMPHONENUMBERS})
            self.__field_numbertypes.readfrombuffer(buf)
            self.__field_numberindices=LIST(**{'elementclass': _gen_p_lgvx5500_35, 'length': NUMPHONENUMBERS})
            self.__field_numberindices.readfrombuffer(buf)
            self.__field_memo=USTRING(**{'sizeinbytes': 36,  'raiseonunterminatedread': False, 'default': '', 'encoding': PHONE_ENCODING })
            self.__field_memo.readfrombuffer(buf)
            self.__field_exit_tag=USTRING(**{'sizeinbytes': 6,  'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '</PE>'})
            self.__field_exit_tag.readfrombuffer(buf)
        else:
            self.__field_dontcare=DATA(**{'sizeinbytes': 251,  'default': '\xff'*251 })
            self.__field_dontcare.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_entry_tag(self):
        try: self.__field_entry_tag
        except:
            self.__field_entry_tag=STRING(**{'sizeinbytes': 5,  'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '\xff\xff\xff\xff\xff' })
        return self.__field_entry_tag.getvalue()

    def __setfield_entry_tag(self, value):
        if isinstance(value,STRING):
            self.__field_entry_tag=value
        else:
            self.__field_entry_tag=STRING(value,**{'sizeinbytes': 5,  'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '\xff\xff\xff\xff\xff' })

    def __delfield_entry_tag(self): del self.__field_entry_tag

    entry_tag=property(__getfield_entry_tag, __setfield_entry_tag, __delfield_entry_tag, None)

    def __getfield_mod_date(self):
        try: self.__field_mod_date
        except:
            self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
        return self.__field_mod_date.getvalue()

    def __setfield_mod_date(self, value):
        if isinstance(value,PBDateTime):
            self.__field_mod_date=value
        else:
            self.__field_mod_date=PBDateTime(value,**{ 'defaulttocurrenttime': True })

    def __delfield_mod_date(self): del self.__field_mod_date

    mod_date=property(__getfield_mod_date, __setfield_mod_date, __delfield_mod_date, None)

    def __getfield_unk0(self):
        try: self.__field_unk0
        except:
            self.__field_unk0=STRING(**{'sizeinbytes': 6,  'terminator': None, 'default': '\xff\xff\xff\xff\xff\xff' })
        return self.__field_unk0.getvalue()

    def __setfield_unk0(self, value):
        if isinstance(value,STRING):
            self.__field_unk0=value
        else:
            self.__field_unk0=STRING(value,**{'sizeinbytes': 6,  'terminator': None, 'default': '\xff\xff\xff\xff\xff\xff' })

    def __delfield_unk0(self): del self.__field_unk0

    unk0=property(__getfield_unk0, __setfield_unk0, __delfield_unk0, None)

    def __getfield_entry_number1(self):
        return self.__field_entry_number1.getvalue()

    def __setfield_entry_number1(self, value):
        if isinstance(value,UINT):
            self.__field_entry_number1=value
        else:
            self.__field_entry_number1=UINT(value,**{'sizeinbytes': 4})

    def __delfield_entry_number1(self): del self.__field_entry_number1

    entry_number1=property(__getfield_entry_number1, __setfield_entry_number1, __delfield_entry_number1, None)

    def __getfield_entry_number0(self):
        return self.__field_entry_number0.getvalue()

    def __setfield_entry_number0(self, value):
        if isinstance(value,UINT):
            self.__field_entry_number0=value
        else:
            self.__field_entry_number0=UINT(value,**{'sizeinbytes': 2})

    def __delfield_entry_number0(self): del self.__field_entry_number0

    entry_number0=property(__getfield_entry_number0, __setfield_entry_number0, __delfield_entry_number0, None)

    def __getfield_name(self):
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 66,  'encoding': 'utf_16_le', 'raiseonunterminatedread': False, 'raiseontruncate': False })
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{'sizeinbytes': 66,  'encoding': 'utf_16_le', 'raiseonunterminatedread': False, 'raiseontruncate': False })

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_group(self):
        try: self.__field_group
        except:
            self.__field_group=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_group.getvalue()

    def __setfield_group(self, value):
        if isinstance(value,UINT):
            self.__field_group=value
        else:
            self.__field_group=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_group(self): del self.__field_group

    group=property(__getfield_group, __setfield_group, __delfield_group, None)

    def __getfield_emails(self):
        try: self.__field_emails
        except:
            self.__field_emails=LIST(**{'elementclass': _gen_p_lgvx5500_29, 'length': NUMEMAILS})
        return self.__field_emails.getvalue()

    def __setfield_emails(self, value):
        if isinstance(value,LIST):
            self.__field_emails=value
        else:
            self.__field_emails=LIST(value,**{'elementclass': _gen_p_lgvx5500_29, 'length': NUMEMAILS})

    def __delfield_emails(self): del self.__field_emails

    emails=property(__getfield_emails, __setfield_emails, __delfield_emails, None)

    def __getfield_ringtone(self):
        try: self.__field_ringtone
        except:
            self.__field_ringtone=UINT(**{'sizeinbytes': 2,  'default': 0xffff })
        return self.__field_ringtone.getvalue()

    def __setfield_ringtone(self, value):
        if isinstance(value,UINT):
            self.__field_ringtone=value
        else:
            self.__field_ringtone=UINT(value,**{'sizeinbytes': 2,  'default': 0xffff })

    def __delfield_ringtone(self): del self.__field_ringtone

    ringtone=property(__getfield_ringtone, __setfield_ringtone, __delfield_ringtone, None)

    def __getfield_wallpaper(self):
        try: self.__field_wallpaper
        except:
            self.__field_wallpaper=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_wallpaper.getvalue()

    def __setfield_wallpaper(self, value):
        if isinstance(value,UINT):
            self.__field_wallpaper=value
        else:
            self.__field_wallpaper=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_wallpaper(self): del self.__field_wallpaper

    wallpaper=property(__getfield_wallpaper, __setfield_wallpaper, __delfield_wallpaper, None)

    def __getfield_numbertypes(self):
        try: self.__field_numbertypes
        except:
            self.__field_numbertypes=LIST(**{'elementclass': _gen_p_lgvx5500_33, 'length': NUMPHONENUMBERS})
        return self.__field_numbertypes.getvalue()

    def __setfield_numbertypes(self, value):
        if isinstance(value,LIST):
            self.__field_numbertypes=value
        else:
            self.__field_numbertypes=LIST(value,**{'elementclass': _gen_p_lgvx5500_33, 'length': NUMPHONENUMBERS})

    def __delfield_numbertypes(self): del self.__field_numbertypes

    numbertypes=property(__getfield_numbertypes, __setfield_numbertypes, __delfield_numbertypes, None)

    def __getfield_numberindices(self):
        try: self.__field_numberindices
        except:
            self.__field_numberindices=LIST(**{'elementclass': _gen_p_lgvx5500_35, 'length': NUMPHONENUMBERS})
        return self.__field_numberindices.getvalue()

    def __setfield_numberindices(self, value):
        if isinstance(value,LIST):
            self.__field_numberindices=value
        else:
            self.__field_numberindices=LIST(value,**{'elementclass': _gen_p_lgvx5500_35, 'length': NUMPHONENUMBERS})

    def __delfield_numberindices(self): del self.__field_numberindices

    numberindices=property(__getfield_numberindices, __setfield_numberindices, __delfield_numberindices, None)

    def __getfield_memo(self):
        try: self.__field_memo
        except:
            self.__field_memo=USTRING(**{'sizeinbytes': 36,  'raiseonunterminatedread': False, 'default': '', 'encoding': PHONE_ENCODING })
        return self.__field_memo.getvalue()

    def __setfield_memo(self, value):
        if isinstance(value,USTRING):
            self.__field_memo=value
        else:
            self.__field_memo=USTRING(value,**{'sizeinbytes': 36,  'raiseonunterminatedread': False, 'default': '', 'encoding': PHONE_ENCODING })

    def __delfield_memo(self): del self.__field_memo

    memo=property(__getfield_memo, __setfield_memo, __delfield_memo, None)

    def __getfield_exit_tag(self):
        try: self.__field_exit_tag
        except:
            self.__field_exit_tag=USTRING(**{'sizeinbytes': 6,  'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '</PE>'})
        return self.__field_exit_tag.getvalue()

    def __setfield_exit_tag(self, value):
        if isinstance(value,USTRING):
            self.__field_exit_tag=value
        else:
            self.__field_exit_tag=USTRING(value,**{'sizeinbytes': 6,  'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False, 'raiseontruncate': False, 'default': '</PE>'})

    def __delfield_exit_tag(self): del self.__field_exit_tag

    exit_tag=property(__getfield_exit_tag, __setfield_exit_tag, __delfield_exit_tag, None)

    def __getfield_dontcare(self):
        try: self.__field_dontcare
        except:
            self.__field_dontcare=DATA(**{'sizeinbytes': 251,  'default': '\xff'*251 })
        return self.__field_dontcare.getvalue()

    def __setfield_dontcare(self, value):
        if isinstance(value,DATA):
            self.__field_dontcare=value
        else:
            self.__field_dontcare=DATA(value,**{'sizeinbytes': 251,  'default': '\xff'*251 })

    def __delfield_dontcare(self): del self.__field_dontcare

    dontcare=property(__getfield_dontcare, __setfield_dontcare, __delfield_dontcare, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('entry_tag', self.__field_entry_tag, None)
        if self.entry_tag==PB_ENTRY_SOR:
            yield ('mod_date', self.__field_mod_date, None)
            yield ('unk0', self.__field_unk0, None)
            yield ('entry_number1', self.__field_entry_number1, None)
            yield ('entry_number0', self.__field_entry_number0, None)
            yield ('name', self.__field_name, None)
            yield ('group', self.__field_group, None)
            yield ('emails', self.__field_emails, None)
            yield ('ringtone', self.__field_ringtone, None)
            yield ('wallpaper', self.__field_wallpaper, None)
            yield ('numbertypes', self.__field_numbertypes, None)
            yield ('numberindices', self.__field_numberindices, None)
            yield ('memo', self.__field_memo, None)
            yield ('exit_tag', self.__field_exit_tag, None)
        else:
            yield ('dontcare', self.__field_dontcare, None)

    def valid(self):
        global PB_ENTRY_SOR
        return self.entry_tag==PB_ENTRY_SOR and ord(self.name[0]) != 0xff




class _gen_p_lgvx5500_29(BaseProtogenClass):
    'Anonymous inner class'
    __fields=['email']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(_gen_p_lgvx5500_29,self).__init__(**dict)
        if self.__class__ is _gen_p_lgvx5500_29:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(_gen_p_lgvx5500_29,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(_gen_p_lgvx5500_29,kwargs)
        if len(args):
            dict2={'sizeinbytes': 49, 'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False}
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_email=USTRING(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_email.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_email=USTRING(**{'sizeinbytes': 49, 'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False})
        self.__field_email.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_email(self):
        return self.__field_email.getvalue()

    def __setfield_email(self, value):
        if isinstance(value,USTRING):
            self.__field_email=value
        else:
            self.__field_email=USTRING(value,**{'sizeinbytes': 49, 'encoding': PHONE_ENCODING, 'raiseonunterminatedread': False})

    def __delfield_email(self): del self.__field_email

    email=property(__getfield_email, __setfield_email, __delfield_email, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('email', self.__field_email, None)




class _gen_p_lgvx5500_33(BaseProtogenClass):
    'Anonymous inner class'
    __fields=['numbertype']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(_gen_p_lgvx5500_33,self).__init__(**dict)
        if self.__class__ is _gen_p_lgvx5500_33:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(_gen_p_lgvx5500_33,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(_gen_p_lgvx5500_33,kwargs)
        if len(args):
            dict2={'sizeinbytes': 1,  'default': 0 }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_numbertype=UINT(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_numbertype.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_numbertype=UINT(**{'sizeinbytes': 1,  'default': 0 })
        self.__field_numbertype.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_numbertype(self):
        return self.__field_numbertype.getvalue()

    def __setfield_numbertype(self, value):
        if isinstance(value,UINT):
            self.__field_numbertype=value
        else:
            self.__field_numbertype=UINT(value,**{'sizeinbytes': 1,  'default': 0 })

    def __delfield_numbertype(self): del self.__field_numbertype

    numbertype=property(__getfield_numbertype, __setfield_numbertype, __delfield_numbertype, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('numbertype', self.__field_numbertype, None)




class _gen_p_lgvx5500_35(BaseProtogenClass):
    'Anonymous inner class'
    __fields=['numberindex']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(_gen_p_lgvx5500_35,self).__init__(**dict)
        if self.__class__ is _gen_p_lgvx5500_35:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(_gen_p_lgvx5500_35,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(_gen_p_lgvx5500_35,kwargs)
        if len(args):
            dict2={'sizeinbytes': 2,  'default': 0xffff }
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_numberindex=UINT(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        self.__field_numberindex.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_numberindex=UINT(**{'sizeinbytes': 2,  'default': 0xffff })
        self.__field_numberindex.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_numberindex(self):
        return self.__field_numberindex.getvalue()

    def __setfield_numberindex(self, value):
        if isinstance(value,UINT):
            self.__field_numberindex=value
        else:
            self.__field_numberindex=UINT(value,**{'sizeinbytes': 2,  'default': 0xffff })

    def __delfield_numberindex(self): del self.__field_numberindex

    numberindex=property(__getfield_numberindex, __setfield_numberindex, __delfield_numberindex, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('numberindex', self.__field_numberindex, None)




class pbfile(BaseProtogenClass):
    __fields=['items', 'eof_tag', 'model_name', 'mod_date', 'blanks', 'eof_close_tag']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbfile,self).__init__(**dict)
        if self.__class__ is pbfile:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbfile,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbfile,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': pbfileentry,             'length': NUMPHONEBOOKENTRIES,             'createdefault': True})
        self.__field_items.writetobuffer(buf)
        try: self.__field_eof_tag
        except:
            self.__field_eof_tag=STRING(**{'sizeinbytes': 6,  'default': '<HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False })
        self.__field_eof_tag.writetobuffer(buf)
        try: self.__field_model_name
        except:
            self.__field_model_name=STRING(**{'sizeinbytes': 10,  'raiseonunterminatedread': False,                'raiseontruncate': False })
        self.__field_model_name.writetobuffer(buf)
        try: self.__field_mod_date
        except:
            self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
        self.__field_mod_date.writetobuffer(buf)
        try: self.__field_blanks
        except:
            self.__field_blanks=DATA(**{'sizeinbytes': 221,  'default': '\x00'*221 })
        self.__field_blanks.writetobuffer(buf)
        try: self.__field_eof_close_tag
        except:
            self.__field_eof_close_tag=STRING(**{'sizeinbytes': 7,  'default': '</HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False  })
        self.__field_eof_close_tag.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_items=LIST(**{ 'elementclass': pbfileentry,             'length': NUMPHONEBOOKENTRIES,             'createdefault': True})
        self.__field_items.readfrombuffer(buf)
        self.__field_eof_tag=STRING(**{'sizeinbytes': 6,  'default': '<HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False })
        self.__field_eof_tag.readfrombuffer(buf)
        self.__field_model_name=STRING(**{'sizeinbytes': 10,  'raiseonunterminatedread': False,                'raiseontruncate': False })
        self.__field_model_name.readfrombuffer(buf)
        self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
        self.__field_mod_date.readfrombuffer(buf)
        self.__field_blanks=DATA(**{'sizeinbytes': 221,  'default': '\x00'*221 })
        self.__field_blanks.readfrombuffer(buf)
        self.__field_eof_close_tag=STRING(**{'sizeinbytes': 7,  'default': '</HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False  })
        self.__field_eof_close_tag.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_items(self):
        try: self.__field_items
        except:
            self.__field_items=LIST(**{ 'elementclass': pbfileentry,             'length': NUMPHONEBOOKENTRIES,             'createdefault': True})
        return self.__field_items.getvalue()

    def __setfield_items(self, value):
        if isinstance(value,LIST):
            self.__field_items=value
        else:
            self.__field_items=LIST(value,**{ 'elementclass': pbfileentry,             'length': NUMPHONEBOOKENTRIES,             'createdefault': True})

    def __delfield_items(self): del self.__field_items

    items=property(__getfield_items, __setfield_items, __delfield_items, None)

    def __getfield_eof_tag(self):
        try: self.__field_eof_tag
        except:
            self.__field_eof_tag=STRING(**{'sizeinbytes': 6,  'default': '<HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False })
        return self.__field_eof_tag.getvalue()

    def __setfield_eof_tag(self, value):
        if isinstance(value,STRING):
            self.__field_eof_tag=value
        else:
            self.__field_eof_tag=STRING(value,**{'sizeinbytes': 6,  'default': '<HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False })

    def __delfield_eof_tag(self): del self.__field_eof_tag

    eof_tag=property(__getfield_eof_tag, __setfield_eof_tag, __delfield_eof_tag, None)

    def __getfield_model_name(self):
        try: self.__field_model_name
        except:
            self.__field_model_name=STRING(**{'sizeinbytes': 10,  'raiseonunterminatedread': False,                'raiseontruncate': False })
        return self.__field_model_name.getvalue()

    def __setfield_model_name(self, value):
        if isinstance(value,STRING):
            self.__field_model_name=value
        else:
            self.__field_model_name=STRING(value,**{'sizeinbytes': 10,  'raiseonunterminatedread': False,                'raiseontruncate': False })

    def __delfield_model_name(self): del self.__field_model_name

    model_name=property(__getfield_model_name, __setfield_model_name, __delfield_model_name, None)

    def __getfield_mod_date(self):
        try: self.__field_mod_date
        except:
            self.__field_mod_date=PBDateTime(**{ 'defaulttocurrenttime': True })
        return self.__field_mod_date.getvalue()

    def __setfield_mod_date(self, value):
        if isinstance(value,PBDateTime):
            self.__field_mod_date=value
        else:
            self.__field_mod_date=PBDateTime(value,**{ 'defaulttocurrenttime': True })

    def __delfield_mod_date(self): del self.__field_mod_date

    mod_date=property(__getfield_mod_date, __setfield_mod_date, __delfield_mod_date, None)

    def __getfield_blanks(self):
        try: self.__field_blanks
        except:
            self.__field_blanks=DATA(**{'sizeinbytes': 221,  'default': '\x00'*221 })
        return self.__field_blanks.getvalue()

    def __setfield_blanks(self, value):
        if isinstance(value,DATA):
            self.__field_blanks=value
        else:
            self.__field_blanks=DATA(value,**{'sizeinbytes': 221,  'default': '\x00'*221 })

    def __delfield_blanks(self): del self.__field_blanks

    blanks=property(__getfield_blanks, __setfield_blanks, __delfield_blanks, None)

    def __getfield_eof_close_tag(self):
        try: self.__field_eof_close_tag
        except:
            self.__field_eof_close_tag=STRING(**{'sizeinbytes': 7,  'default': '</HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False  })
        return self.__field_eof_close_tag.getvalue()

    def __setfield_eof_close_tag(self, value):
        if isinstance(value,STRING):
            self.__field_eof_close_tag=value
        else:
            self.__field_eof_close_tag=STRING(value,**{'sizeinbytes': 7,  'default': '</HPE>',               'raiseonunterminatedread': False,               'raiseontruncate': False  })

    def __delfield_eof_close_tag(self): del self.__field_eof_close_tag

    eof_close_tag=property(__getfield_eof_close_tag, __setfield_eof_close_tag, __delfield_eof_close_tag, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('items', self.__field_items, None)
        yield ('eof_tag', self.__field_eof_tag, None)
        yield ('model_name', self.__field_model_name, None)
        yield ('mod_date', self.__field_mod_date, None)
        yield ('blanks', self.__field_blanks, None)
        yield ('eof_close_tag', self.__field_eof_close_tag, None)




class pbgroup(BaseProtogenClass):
    __fields=['name', 'groupid', 'user_added']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbgroup,self).__init__(**dict)
        if self.__class__ is pbgroup:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbgroup,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbgroup,kwargs)
        if len(args): raise TypeError('Unexpected arguments supplied: '+`args`)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 66, 'encoding': 'utf_16_le',                'raiseonunterminatedread': False,                'raiseontruncate': False,                'default': ''})
        self.__field_name.writetobuffer(buf)
        try: self.__field_groupid
        except:
            self.__field_groupid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_groupid.writetobuffer(buf)
        try: self.__field_user_added
        except:
            self.__field_user_added=UINT(**{'sizeinbytes': 1, 'default': 0})
        self.__field_user_added.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_name=USTRING(**{'sizeinbytes': 66, 'encoding': 'utf_16_le',                'raiseonunterminatedread': False,                'raiseontruncate': False,                'default': ''})
        self.__field_name.readfrombuffer(buf)
        self.__field_groupid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        self.__field_groupid.readfrombuffer(buf)
        self.__field_user_added=UINT(**{'sizeinbytes': 1, 'default': 0})
        self.__field_user_added.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_name(self):
        try: self.__field_name
        except:
            self.__field_name=USTRING(**{'sizeinbytes': 66, 'encoding': 'utf_16_le',                'raiseonunterminatedread': False,                'raiseontruncate': False,                'default': ''})
        return self.__field_name.getvalue()

    def __setfield_name(self, value):
        if isinstance(value,USTRING):
            self.__field_name=value
        else:
            self.__field_name=USTRING(value,**{'sizeinbytes': 66, 'encoding': 'utf_16_le',                'raiseonunterminatedread': False,                'raiseontruncate': False,                'default': ''})

    def __delfield_name(self): del self.__field_name

    name=property(__getfield_name, __setfield_name, __delfield_name, None)

    def __getfield_groupid(self):
        try: self.__field_groupid
        except:
            self.__field_groupid=UINT(**{'sizeinbytes': 2,  'default': 0 })
        return self.__field_groupid.getvalue()

    def __setfield_groupid(self, value):
        if isinstance(value,UINT):
            self.__field_groupid=value
        else:
            self.__field_groupid=UINT(value,**{'sizeinbytes': 2,  'default': 0 })

    def __delfield_groupid(self): del self.__field_groupid

    groupid=property(__getfield_groupid, __setfield_groupid, __delfield_groupid, None)

    def __getfield_user_added(self):
        try: self.__field_user_added
        except:
            self.__field_user_added=UINT(**{'sizeinbytes': 1, 'default': 0})
        return self.__field_user_added.getvalue()

    def __setfield_user_added(self, value):
        if isinstance(value,UINT):
            self.__field_user_added=value
        else:
            self.__field_user_added=UINT(value,**{'sizeinbytes': 1, 'default': 0})

    def __delfield_user_added(self): del self.__field_user_added

    user_added=property(__getfield_user_added, __setfield_user_added, __delfield_user_added, "=1 when was added by user")

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('name', self.__field_name, None)
        yield ('groupid', self.__field_groupid, None)
        yield ('user_added', self.__field_user_added, "=1 when was added by user")




class pbgroups(BaseProtogenClass):
    "Phonebook groups"
    __fields=['groups']

    def __init__(self, *args, **kwargs):
        dict={}
        # What was supplied to this function
        dict.update(kwargs)
        # Parent constructor
        super(pbgroups,self).__init__(**dict)
        if self.__class__ is pbgroups:
            self._update(args,dict)


    def getfields(self):
        return self.__fields


    def _update(self, args, kwargs):
        super(pbgroups,self)._update(args,kwargs)
        keys=kwargs.keys()
        for key in keys:
            if key in self.__fields:
                setattr(self, key, kwargs[key])
                del kwargs[key]
        # Were any unrecognized kwargs passed in?
        if __debug__:
            self._complainaboutunusedargs(pbgroups,kwargs)
        if len(args):
            dict2={'elementclass': pbgroup,            'raiseonincompleteread': False,            'length': MAX_PHONEBOOK_GROUPS,            'createdefault': True}
            dict2.update(kwargs)
            kwargs=dict2
            self.__field_groups=LIST(*args,**dict2)
        # Make all P fields that haven't already been constructed


    def writetobuffer(self,buf,autolog=True,logtitle="<written data>"):
        'Writes this packet to the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        try: self.__field_groups
        except:
            self.__field_groups=LIST(**{'elementclass': pbgroup,            'raiseonincompleteread': False,            'length': MAX_PHONEBOOK_GROUPS,            'createdefault': True})
        self.__field_groups.writetobuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologwrite(buf, logtitle=logtitle)


    def readfrombuffer(self,buf,autolog=True,logtitle="<read data>"):
        'Reads this packet from the supplied buffer'
        self._bufferstartoffset=buf.getcurrentoffset()
        if autolog and self._bufferstartoffset==0: self.autologread(buf, logtitle=logtitle)
        self.__field_groups=LIST(**{'elementclass': pbgroup,            'raiseonincompleteread': False,            'length': MAX_PHONEBOOK_GROUPS,            'createdefault': True})
        self.__field_groups.readfrombuffer(buf)
        self._bufferendoffset=buf.getcurrentoffset()


    def __getfield_groups(self):
        try: self.__field_groups
        except:
            self.__field_groups=LIST(**{'elementclass': pbgroup,            'raiseonincompleteread': False,            'length': MAX_PHONEBOOK_GROUPS,            'createdefault': True})
        return self.__field_groups.getvalue()

    def __setfield_groups(self, value):
        if isinstance(value,LIST):
            self.__field_groups=value
        else:
            self.__field_groups=LIST(value,**{'elementclass': pbgroup,            'raiseonincompleteread': False,            'length': MAX_PHONEBOOK_GROUPS,            'createdefault': True})

    def __delfield_groups(self): del self.__field_groups

    groups=property(__getfield_groups, __setfield_groups, __delfield_groups, None)

    def iscontainer(self):
        return True

    def containerelements(self):
        yield ('groups', self.__field_groups, None)




